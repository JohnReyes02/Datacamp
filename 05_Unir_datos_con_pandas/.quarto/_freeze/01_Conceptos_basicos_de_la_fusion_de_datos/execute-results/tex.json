{
  "hash": "8ce2255f22a655183754cc49f6b2fdc6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Conceptos Básicos de la fusión de datos\"\nauthor: \"Edwin John Fredy Reyes Aguirre\"\ndate: today\ntoc: true\ntoc-title: \"Contenido\"\n---\n\n\nAprende a fusionar datos dispares mediante uniones internas. Combinando información de múltiples fuentes, descubrirás perspectivas convincentes que antes podían estar ocultas. También aprenderás cómo la relación entre esas fuentes, de uno a uno o de uno a muchos, puede afectar a tu resultado.\n\n## Unión interna\n\n### Qué columna elegiremos para fusionar?\n\nChicago proporciona una lista de propietarios de taxis y vehículos con licencia para operar en la ciudad, por seguridad pública. Tu objetivo es unir dos tablas. Una tabla se llama `taxi_owners` y contiene información sobre los propietarios de las empresas de taxis, mientras que la otra se llama `taxi_veh`e incluye información sobre cada vehículo de taxi.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntaxi_owners = pd.read_pickle('../datasets/taxi_owners.p')\ntaxi_owners.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rid</th>\n      <th>vid</th>\n      <th>owner</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>T6285</td>\n      <td>6285</td>\n      <td>AGEAN TAXI LLC</td>\n      <td>4536 N. ELSTON AVE.</td>\n      <td>60630</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>T4862</td>\n      <td>4862</td>\n      <td>MANGIB CORP.</td>\n      <td>5717 N. WASHTENAW AVE.</td>\n      <td>60659</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>T1495</td>\n      <td>1495</td>\n      <td>FUNRIDE, INC.</td>\n      <td>3351 W. ADDISON ST.</td>\n      <td>60618</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T4231</td>\n      <td>4231</td>\n      <td>ALQUSH CORP.</td>\n      <td>6611 N. CAMPBELL AVE.</td>\n      <td>60645</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>T5971</td>\n      <td>5971</td>\n      <td>EUNIFFORD INC.</td>\n      <td>3351 W. ADDISON ST.</td>\n      <td>60618</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntaxi_veh = pd.read_pickle('../datasets/taxi_vehicles.p')\ntaxi_veh.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vid</th>\n      <th>make</th>\n      <th>model</th>\n      <th>year</th>\n      <th>fuel_type</th>\n      <th>owner</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2767</td>\n      <td>TOYOTA</td>\n      <td>CAMRY</td>\n      <td>2013</td>\n      <td>HYBRID</td>\n      <td>SEYED M. BADRI</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1411</td>\n      <td>TOYOTA</td>\n      <td>RAV4</td>\n      <td>2017</td>\n      <td>HYBRID</td>\n      <td>DESZY CORP.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6500</td>\n      <td>NISSAN</td>\n      <td>SENTRA</td>\n      <td>2019</td>\n      <td>GASOLINE</td>\n      <td>AGAPH CAB CORP</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2746</td>\n      <td>TOYOTA</td>\n      <td>CAMRY</td>\n      <td>2013</td>\n      <td>HYBRID</td>\n      <td>MIDWEST CAB CO, INC</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5922</td>\n      <td>TOYOTA</td>\n      <td>CAMRY</td>\n      <td>2013</td>\n      <td>HYBRID</td>\n      <td>SUMETTI CAB CO</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Instrucciones:\n\nElige una columna que utilizarías para fusionar las dos tablas utilizando el método `.merge()`.\n\nRespuestas posibles\n\n- [ ] on='rid'\n\n- [x] on='vid'\n\n- [ ] on='year'\n\n- [ ] on='zip'\n\n\n### Tu primera unión interna\n\nTe han encargado que averigües cuáles son los tipos de combustibles más utlizados en los taxis de Chicago. Para completar el análisis, tienes que fusionar las tablas `taxi_owners` y `taxi_veh` en la columna `vid`. A continuación, puedes utilizar la tabla combinada junto con el método `.values_counts()` para encontrar el `fuel_type` más común.\n\n#### Instrucciones:\n\n1. Fusiona `taxi_owners` con `taxi_veh` en la columna `vid` y guarda el resultado en `taxi_own_veh`.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Merge the taxi_owners and taxi_veh tables\ntaxi_own_veh = taxi_owners.merge(taxi_veh, on='vid')\ntaxi_own_veh.head()\n\n# Print the column names of taxi_own_veh\nprint(taxi_own_veh.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['rid', 'vid', 'owner_x', 'address', 'zip', 'make', 'model', 'year',\n       'fuel_type', 'owner_y'],\n      dtype='object')\n```\n:::\n:::\n\n\n2. Establece los sufijos izquierdo y derecho de la tabla para las columnas solapadas de la fusión en `_own` y `_veh`, respectivamente.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Merge the taxi_owners and taxi_veh tables setting a suffix\ntaxi_own_veh = taxi_owners.merge(taxi_veh, on='vid', suffixes=('_own', '_veh'))\ntaxi_own_veh.head()\n\n# Print the column names of taxi_own_veh\nprint(taxi_own_veh.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['rid', 'vid', 'owner_own', 'address', 'zip', 'make', 'model', 'year',\n       'fuel_type', 'owner_veh'],\n      dtype='object')\n```\n:::\n:::\n\n\n3. Selecciona la columna `fuel_type` de `taxi_own_veh` e imprime `value_counts()` para encontrar los `fuel_type` más utilizados.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Merge the taxi_owners and taxi_veh tables setting a suffix\ntaxi_own_veh = taxi_owners.merge(taxi_veh, on='vid', suffixes=('_own', '_veh'))\n\n# Print the value_counts to find the most popular fuel_type\nprint(taxi_own_veh['fuel_type'].value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfuel_type\nHYBRID                    2792\nGASOLINE                   611\nFLEX FUEL                   89\nCOMPRESSED NATURAL GAS      27\nName: count, dtype: int64\n```\n:::\n:::\n\n\n### Uniones internas y número de filas devueltas\n\nTodas las fusiones que has estudiado hasta ahora se llaman uniones internas. Es necesario comprender que las uniones internas solo devuelven las filas con valores coincidentes en ambas tablas. Explorarás esto más a fondo revisando la fusión entre las tablas `wards` y `census`, y comparándola después con fusiones de copias de estas tablas ligeramente alteradas, denominadas `wards_altered` y `census_altered`. La primera fila de la columna `wards` se ha modificado en las tablas alteradas. Examinarás cómo afecta esto a la fusión entre ellos.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nwards = pd.read_pickle('../datasets/ward.p')\nwards.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>alderman</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Proco \"Joe\" Moreno</td>\n      <td>2058 NORTH WESTERN AVENUE</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Brian Hopkins</td>\n      <td>1400 NORTH  ASHLAND AVENUE</td>\n      <td>60622</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Pat Dowell</td>\n      <td>5046 SOUTH STATE STREET</td>\n      <td>60609</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>William D. Burns</td>\n      <td>435 EAST 35TH STREET, 1ST FLOOR</td>\n      <td>60616</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Leslie A. Hairston</td>\n      <td>2325 EAST 71ST STREET</td>\n      <td>60649</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ncensus = pd.read_pickle('../datasets/census.p')\ncensus.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>pop_2000</th>\n      <th>pop_2010</th>\n      <th>change</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>52951</td>\n      <td>56149</td>\n      <td>6%</td>\n      <td>2765 WEST SAINT MARY STREET</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>54361</td>\n      <td>55805</td>\n      <td>3%</td>\n      <td>WM WASTE MANAGEMENT 1500</td>\n      <td>60622</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>40385</td>\n      <td>53039</td>\n      <td>31%</td>\n      <td>17 EAST 38TH STREET</td>\n      <td>60653</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>51953</td>\n      <td>54589</td>\n      <td>5%</td>\n      <td>31ST ST HARBOR BUILDING LAKEFRONT TRAIL</td>\n      <td>60653</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>55302</td>\n      <td>51455</td>\n      <td>-7%</td>\n      <td>JACKSON PARK LAGOON SOUTH CORNELL DRIVE</td>\n      <td>60637</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nwards_altered = wards.copy()\nwards_altered.loc[0, 'ward'] = 61\nwards_altered.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>alderman</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>61</td>\n      <td>Proco \"Joe\" Moreno</td>\n      <td>2058 NORTH WESTERN AVENUE</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Brian Hopkins</td>\n      <td>1400 NORTH  ASHLAND AVENUE</td>\n      <td>60622</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Pat Dowell</td>\n      <td>5046 SOUTH STATE STREET</td>\n      <td>60609</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>William D. Burns</td>\n      <td>435 EAST 35TH STREET, 1ST FLOOR</td>\n      <td>60616</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Leslie A. Hairston</td>\n      <td>2325 EAST 71ST STREET</td>\n      <td>60649</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncensus_altered = census.copy()\ncensus_altered.loc[0, 'ward'] = None\ncensus_altered.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ward</th>\n      <th>pop_2000</th>\n      <th>pop_2010</th>\n      <th>change</th>\n      <th>address</th>\n      <th>zip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>None</td>\n      <td>52951</td>\n      <td>56149</td>\n      <td>6%</td>\n      <td>2765 WEST SAINT MARY STREET</td>\n      <td>60647</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>54361</td>\n      <td>55805</td>\n      <td>3%</td>\n      <td>WM WASTE MANAGEMENT 1500</td>\n      <td>60622</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>40385</td>\n      <td>53039</td>\n      <td>31%</td>\n      <td>17 EAST 38TH STREET</td>\n      <td>60653</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>51953</td>\n      <td>54589</td>\n      <td>5%</td>\n      <td>31ST ST HARBOR BUILDING LAKEFRONT TRAIL</td>\n      <td>60653</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>55302</td>\n      <td>51455</td>\n      <td>-7%</td>\n      <td>JACKSON PARK LAGOON SOUTH CORNELL DRIVE</td>\n      <td>60637</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Instrucciones:\n\n1. Fusiona `wards` y `census` en la columna `ward` y guarda el resultado en `ward_census`.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Merge the wards and census tables on the ward column\nward_census = wards.merge(census, on='ward')\n\n# Print the shape of wards_census\nprint(f'ward_census table shape: {ward_census.shape}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nward_census table shape: (50, 9)\n```\n:::\n:::\n\n\n2. Fusiona las tablas `merge_altered` y `census` en la columna `ward` y observa la diferencia en las filas devueltas.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Print the first few rows of the wards_altered table to view the change\nprint(wards_altered[['ward']].head())\n\n# Merge the wards_altered and census tables on the ward column\nwards_altered_census =  wards_altered.merge(census, on='ward')\n\n# Print the shape of wards_altered_census\nprint(f'wards_altered_census table shape: {wards_altered_census.shape}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ward\n0   61\n1    2\n2    3\n3    4\n4    5\nwards_altered_census table shape: (49, 9)\n```\n:::\n:::\n\n\n3. Fusiona las tablas `wards` y `census_altered` en la columna `ward` y observa la diferencia en las filas devueltas.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Print the first few rows of the wards_altered table to view the change\nprint(census_altered[['ward']].head())\n\n# Merge the wards_altered and census tables on the ward column\nwards_altered_census =  wards.merge(census_altered, on='ward')\n\n# Print the shape of wards_altered_census\nprint(f'wards_altered_census table shape: {wards_altered_census.shape}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ward\n0  None\n1     2\n2     3\n3     4\n4     5\nwards_altered_census table shape: (49, 9)\n```\n:::\n:::\n\n\nEn el paso 1, el `.merge()` devolvió una tabla con el mismo número de filas que la tabla original `wards`. Sin embargo, en los pasos 2 y 3, al usar las tablas alteradas con la primera fila alterada de la columna `ward`, el número de filas devueltas fue menor. No había un valor coincidente en la columna `ward` de la otra tabla. _Recuerda que `.merge()` solo devuelve filas donde los valores coinciden en ambas tablas._\n\n\n## Relaciones de uno a muchos\n\n",
    "supporting": [
      "01_Conceptos_basicos_de_la_fusion_de_datos_files\\figure-pdf"
    ],
    "filters": []
  }
}