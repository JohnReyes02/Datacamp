---
title: "Convertir el análisis exploratorio en acción"
---

El análisis exploratorio de datos es un paso crucial en el flujo de trabajo de la ciencia de datos, ¡por no esl el final! Ahora es el momento de aprender técnicas y consideraciones que puedes utilizar para avanzar con éxito en tus proyectos una vez que hayas terminado de explorar.

## Consideraciones para datos categóricos

-   Por qué ejecutar EDA?
    -   Detectar patrones y relaciones.
    -   Generar preguntas o hipótesis.
    -   Preparar datos para modelos de machine learning.
-   Representatividad de los datos
    -   La muestra debe representar la población.
    -   Por ejemplo:
        -   Educación versus ingresos en USA
            -   No se pueden usar datos de Francia
-   Clases Categóricas
    -   Clases = etiquetas
    -   Ejemplo, actitudes de las personas hacia el matrimonio.
        -   Estado civil
            -   Soltero
            -   Casado
            -   Divorciado
-   Desbalance de Clases

![](images/paste-66.png)

-   Frecuencia de Clases

```{python}
#| echo: true
#| eval: false
print(planes('Destination').value_counts())
```

![](images/paste-67.png)

-   Frecuencia relativa de clases

    -   40% de los vuelos internos de la India van hacia Delhi.

```{python}
#| echo: true
#| eval: false
planes['Destination'].value_counts(normalize=True)
```

![](images/paste-68.png)

Es nuestra muestra representativa de la población? (Vuelos internos de India)

-   Tabulación Cruzada

    -   Es otro método para observar la frecuencia de clase, que permite examinar la frecuencia de combinaciones de clases

    ![](images/paste-69.png)

```{python}
#| echo: true
#| eval: false
pd.crosstab(planes['Source'], planes['Destination'])
```

![](images/paste-70.png)

-   Extendiendo la tabulación cruzada

| Source   | Destination | Median Price (IDR) |
|----------|-------------|--------------------|
| Banglore | Delhi       | 4232.21            |
| Banglore | New Delhi   | 12114.56           |
| Chennai  | Kolkata     | 3859.76            |
| Delhi    | Cochin      | 9987.63            |
| Kolkata  | Banglore    | 9654.21            |
| Mumbai   | Hyderabad   | 3431.97            |

-   Agregación de valores con pd.crosstab()

```{python}
#| echo: true
#| eval: false
pd.crosstab(planes['Source'], planes['Destination'],
           values=planes['Price'], aggfunc='median')
```

![](images/paste-71.png)

Los resultados muestran valores de la mediana para todas las rutas posibles en el conjunto de datos.

-   Comparando la muestra con la población

| Source   | Desitnation | Median Price (IDR) | Median Price (dataset) |
|----------|-------------|--------------------|------------------------|
| Banglore | Delhi       | 4232.21            | 4823.0                 |
| Banglore | New Delhi   | 12114.56           | 10976.50               |
| Chennai  | Kolkata     | 3859.76            | 3850.0                 |
| Delhi    | Cochin      | 9987.63            | 10260.0                |
| Kolkata  | Banglore    | 9654.21            | 9345.0                 |
| Mumbai   | Hyderabad   | 3431.97            | 3342.0                 |

### Comprobación del desequilibrio de clases

La [Encuesta Kaggle 2022](https://www.kaggle.com/kaggle-survey-2022) recoge la información sobre la formación de los científicos de datos, sus tecnologías y técnicas preferidas. Se considera una visión precisa de lo que está ocurriendo en la ciencia de datos, basada en el volumen y el perfil de los que responden.

Una vez examinados los títulos de los puestos y categorizados para alinearlos con nuestro `salaries` DataFrame\`, puedes ver la siguiente proporción de categorías laborales en la encuesta Kaggle:

| Categoría laboral   | Frecuencia relativa |
|---------------------|---------------------|
| Ciencia de datos    | 0,281236            |
| Análisis de datos   | 0,224231            |
| Otros               | 0,214609            |
| Dirección           | 0,121300            |
| Machine Learning    | 0,083248            |
| Ingeniería de datos | 0,075375            |

Pensando en los resultados de la encuesta Kaggle como población, tu tarea consiste en averiguar si el DataFrame `salaries` es representativo comparando la frecuencia relativa de las categorías laborales.

```{python}
import pandas as pd
ruta = './data/salaries.csv'
salaries = pd.read_csv(ruta)
salaries.head()
```

#### Instrucciones

-   Imprime la frecuencia relativa de la columna `Job_Category` de `salaries` DataFrame

::: callout-note
Para exportar el dataset en formato CSV dentro de DataCamp y luego copiarlo:

``` python
print(salaries.to_csv(index=False))
```
:::

```{python}
# Print the relative frequency of Job_Category
print(salaries['Job_Category'].value_counts(normalize=True))
```

Parece que Data Science es la clase más popular y tiene una representación similar. Aún así, las otras categorías tienen frecuencias relativas bastante diferentes, lo cual pordría no ser sorprendente dado que el público objetivo son científico de datos. Dada la diferencia en las frecuencias relativas, ¿puedes confiar en que el DataFrame `salaries` representa con precisión los roles gerenciales?

### Tabulación cruzada

La tabulación cruzada puede ayudar a identificar cómo se combinan las observaciones.

Utilizando el conjunto de datos `salaries`, que se ha importado como un DataFrame `pandas`, realizarás una tabulación cruzada de múltiples variables, incluyendo el uso de la agregación, para ver la relación entre 'Company_Size' y otras variables.

#### Instrucciones

1.  Realiza una tabulación cruzada, estableciendo `Company_Size` como índice, y las columnas a las clases en `Experience`.

```{python}
# Cross-tabulate Company_Size and Experience
print(pd.crosstab(salaries['Company_Size'], salaries['Experience']))
```

2.  Cruza 'Job_Category' y las clases de 'Company_Size' como nombres de columna.

```{python}
# Cross-tabulate Job_Category and Company_Size
print(pd.crosstab(salaries['Job_Category'], salaries['Company_Size']))
```

3.  Actualiza `pd.crosstab()` para que devuelva los valores medios de `Salary_USD`.

```{python}
# Cross-tabulate Job_Category and Company_Size
print(pd.crosstab(salaries['Job_Category'], salaries['Company_Size'], values= salaries['Salary_USD'], aggfunc='mean'))
```

Ésta es una función útil para examinar la combinación de frecuencias, así como para encontrar estadísticas agregadas. ¡Parece que el salario medio más alto es para roles de datos gerenciales en grandes empresas!

## Generar nuevas Características

-   Correlación

```{python}
#| echo: true
#| eval: false
sns.heatmap(planes.corr(numeric_only=True), annot=True)
plt.show()
```

![](images/paste-72.png)

-   Viendo el tipo de datos

```{python}
#| echo: true
#| eval: false
print(planes.dtypes)
```

![](images/paste-73.png)

-   Total Stops

```{python}
#| echo: true
#| eval: false
print(planes['Total_Stops'].value_counts())
```

![](images/paste-74.png)

Se observa que es necesario eliminar algunos caracteres.

-   Limpiando Total Stops

```{python}
#| echo: true
#| eval: false
planes['Total_Stops'] = planes['Total_Stops'].str.replace(' stops', '')
planes['Total_Stops'] = planes['Total_Stops'].str.replace(' stop', '')
planes['Total_Stops'] = planes['Total_Stops'].str.replace('non-stop', '0')
planes['Total_Stops'] = planes['Total_Stops'].astype(int)
```

-   Correlación

```{python}
#| echo: true
#| eval: false
sns.heatmap(planes.corr(numeric_only=True), annot=True)
plt.show()
```

![](images/paste-75.png)

-   Fechas

```{python}
#| echo: true
#| eval: false
print(planes.dtypes)
```

![](images/paste-76.png)

-   Extrayendo el mes y el día de la semana

```{python}
#| echo: true
#| eval: false
planes['month'] = planes['Date_of_Journey'].dt.month
planes['weekday'] = planes['Date_of_Journey'].dt.weekday
print(planes[['month', 'weekday', 'Date_of_Journey']].head())
```

![](images/paste-77.png)

-   Tiempos de salidas y llegadas

```{python}
#| echo: true
#| eval: false
planes['Dep_Hour'] = planes['Dep_Time'].dt.hour
planes['Arrival_Hour'] = planes['Arrival_Time'].dt.hour
```

-   Correlación

![](images/paste-78.png)

No hay correlaciones, pero no lo sabríamos si no se hubieran generado nuevas características.

-   Creando características

```{python}
#| echo: true
#| eval: false
print(planes['Price'].describe())
```

![](images/paste-79.png)

| Rango             | Tipo de tiquete |
|-------------------|-----------------|
| \<= 5228          | Economy         |
| \> 5528 \<= 8355  | Premium Economy |
| \> 8355 \<= 12373 | Business Class  |
| \> 12373          | First Class     |

-   Estadística descriptiva

### Extraer características para la correlación

### Cálculo de los percentiles salariales

### Categorizar los salarios

## Generar hipótesis

### Comparar salarios

### Elegir una hipótesis