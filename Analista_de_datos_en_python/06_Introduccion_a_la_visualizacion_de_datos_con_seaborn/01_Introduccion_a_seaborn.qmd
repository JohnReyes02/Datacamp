---
title: "Introducción a Seaborn"
author: "Edwin John Fredy Reyes Aguirre"
date: today
toc: true
toc-title: "Contenido"
---

Qué es Seaborn y cuándo debes utilizarlo? En este capítulo, ¡Lo descubrirás! Además, aprenderás a crear gráficos de dispersión y de recuento tanto con listas de datos como con DataFrames de pandas. También conocerás una de las grandes ventajas de utilizar Seaborn: la posibilidad de añadir fácilmente una tercera varible a tus gráficos utilizando el color para representar diferentes subgrupos.

## Introducción a Seaborn

- Qué es Seaborn?
    - Puthon es una librería de visualización de datos
    - Crea facilmente los tipos más comunes de gráficos

- Por qué es útil Seaborn?
    - Exploración de datos
    - Comunicación de resultados

- Ventajas de Seaborn
    - Fácil de usar
    - Trabaja bien con estructuras de datos de `pandas`
    - Construído sobre `matplotlib`

- Cómo iniciar?

```{python}
#| echo: true
#| eval: false
import seaborn as sns # Samuel Norman Seaborn (sns)
import matplotlib.pyplot as plt
```

- Ejemplo 1: Scatter plot

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
height = [62, 64, 69, 75, 66,
          68, 65, 71, 76, 73]
weight = [120, 136, 148, 175, 137,
          165, 154, 172, 200, 187]
sns.scatterplot(x=height, y=weight)
plt.show()
```

- Ejemplo 2: Crear un count plot

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
gender = ['Female', 'Female',
          'Female', 'Female',
          'Male', 'Male', 'Male',
          'Male', 'Male', 'Male']
sns.countplot(x=gender)
```

### Hacer un gráfico de dispersión con listas

En este ejecicio, utilizaremos un conjunto de datos que contiene información sobre 227 países. Este conjunto de datos contiene mucha información interesante sobre cada país, como sus tasas de natalidad y mortalidad y su producto interno bruto (GDP). GDP es el valor de todos los bienes y servicios producidas en un año, expresado en dólares por persona.

Hemos creado tres listas de datos a partir de este conjunto de datos para que puedas empezar. `gdp` es una lista que contiene el valor de GDP por país, expresado en dólares por persona. `phones` es una lista con el número de teléfonos móviles por cada 1000 personas en este país. Por último `percent_literate` es una lista que contiene el porcentaje de la población de cada país que sabe leer y escribir.

```{python}
import pandas as pd

ruta = './data/countries-of-the-world.csv'
df = pd.read_csv(ruta)
df.head()
```

```{python}
# Convertir a numerico los datos tipo object
df['Phones (per 1000)'] = df['Phones (per 1000)'].str.replace(',', '.').astype(float)
df['Literacy (%)'] = df['Literacy (%)'].str.replace(',', '.').astype(float)

# Crear las listas
gdp = df['GDP ($ per capita)'].tolist()
phones = df['Phones (per 1000)'].tolist()
percent_literate = df['Literacy (%)'].tolist()
```


#### Instrucciones

1. Importa Matplotlib y Seaborn utilizando la convención de nomenclatura estándar.

```{python}
# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns
```

2. Crea un gráfico de dispersión de GDP (`gdp`) frente al número de teléfonos por cada 1000 personas (`phones`).

```{python}
# Create scatterplot with GDP on x-axis and number of phones on the y-axis
sns.scatterplot(x=gdp, y=phones)
plt.show()
```

3. Combina el diagrama de dispersión para que muestre el porcentaje de la población que sabe leer y escribir (`percent_literate`) en el eje y.

```{python}
sns.scatterplot(x=gdp, y=percent_literate)
plt.show()
```
Aunque este gráfico no muestra una relación lineal entre el PIB y el porcentaje de alfabetización, los países con un PIB más bajo parecen tener más probabilidades de tener un porcentaje menor de la población que puede leer y escribir.


### Hacer un gráfico de recuento con una lista

En el ejercicio anterior, exploramos un conjunto de datos que contienen información sobre 227 países. Exploremos más a fondo estos dato: concretamente, ¿cuántos países hay en cada región del mundo?

Para ello, tendremos que utilizar un gráfico de recuento. Los gráficos de recuento toman una lista categórica y devuelven barras que representan el número de entradas de la lista por categoría. Puedes crear una aquí utilizando una lista de regiones para cada país, que es uva variable llamada `region`.


```{python}
# Se convierte la columna Region en lista y se quitan los espacios
region = df['Region'].tolist()
region = [item.strip() for item in region]
```

#### Instrucciones

- Importa Matplotlib y Seaborn utilizando las convenciones de nomenclatura estándar.
- Utiliza Seaborn para crear un gráfico de recuento con `region` en el eje y.
- Visualiza el gráfico

```{python}
# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create count plot with region on the y-axis
sns.countplot(y=region)

# Show plot
plt.show()
```

África Subsahariana contiene la mayoría de los países en esta lista.


## Utilizar pandas con Seaborn

- Qué es Pandas?
    - Librería de Python para análisis de datos.
    - Puede leer conjunto de datos de múltiples tipos de archivos. Por ejemplo csv, txt.
    - El conjunto de datos toma la forma de objeto `DataFrame`.

- Trabajando con DataFrames

```{python}
#| echo: true
#| eval: false
import pandas as pd
df = pd.read_csv('masculinity.csv')
df.head()
```

- Usando DataFrames con countplot()

```{python}
#| echo: true
#| eval: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('masculinity.csv')
sns.countplot(x='how_masucline', data=df)
plt.show()
```

### Datos "ordenados" frente a datos "desordenados"

Aquí tenemos un conjunto de datos que muestra de una encuesta a niños sobre sus animales favoritos. Pros, ¿Podemos utilizar este conjunto de datos tal cual con Seaborn? Vamos a utilizar pandas para importar el archivo csv con los datos recogidos en la encuestra y determinar si está ordenado, lo cual es esencial para que funcione bien con Seaborn.

Para empezar, se ha asignado la tura del archivo csv a la variable `csv_filepath`.

#### Instrucciones

1. 
- Lee el archivo csv situado en `csv_filepath` en un DataFrame llamado `df`.
- Imprime la cabecera de `df` para mostrar las cinco primeras filas.


```{python}
csv_filepath = './data/1.2.1_example_csv.csv'
```


```{python}
# Import pandas
import pandas as pd

# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath)

# Print the head of df
print(df.head())
```

2. **Pregunta**

Visualiza las cinco primeras filas del DataFrame `df`. ¿Está ordenado? ¿Por qué si o por qué no?

**Respuestas posibles**

- [ ] Si, porque no hay erratas ni faltan valores.
- [ ] Si, porque está vien organizado y es fácil de leer.
- [X] No, porque una misma columna contiene distintos tipos de formación.


### Hacer un gráfico de recuento con un DataFrame

En este ejercicio examinaremos las respuestas a una encuesta enviada a los jóvenes. Nuestra pregunta principal aquí es: ¿cuántos jóvenes encuestados afirman tener miedo a las arañas? Se pidió a los participantes en la encuesta que estuvieran de acuerdo o en desacuerdo con la afirmación "Tengo miedo a las arañas". Las respuestas varían de 1 a 5, donde 1 es "Totalmente en desacuerdo" y 5 es "Totalmente de acuerdo".

Para empezar, la ruta del archivo csv con los datos de la encuesta se ha asignado a la variable `csv_filepath`.

#### Instrucciones

- Importa Matplotlib, pandas y Seaborn utilizando los nombres estándar. 
- Crea un DataFrame llamado `df` a partir del archivo csv situado en `csv_filepath`.
- Utilizando la función `countplot()` con los argumentos `x=` y `data=` para crear un gráfico de recuento con los valores de la columna `"Spiders"` en el eje x.
- Visualiza el gráfico.

```{python}
csv_filepath = './data/young-people-survey-responses.csv'
```

```{python}
# Import Matplotlib, pandas and Seaborn
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create a DataFrame from csv file
df = pd.read_csv(csv_filepath)

# Create a countplot with "Spiders" on the x-axis
sns.countplot(x='Spiders', data=df)

# Display the plot
plt.show()
```

Este gráfico nos muestra que la gran mayoría de los jóvenes informaron no tener miedo a las arañas.


## Añadir una tercera variable con el tono

Para probarlos usaremos el siguiente Dataset:

- Dataset Tips


```{python}
import pandas as pd
import seaborn as sns
tips = pd.read_csv('./data/tips.csv')
tips.head()
```

- Un Scatter plot básico

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(x='total_bill',
                y='tip',
                data=tips)

plt.show()
```

- Un Scatter plot con hue

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(x='total_bill',
                y='tip',
                data=tips,
                hue='smoker')

plt.show()
```

- Configurando el orden del hue

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
sns.scatterplot(x='total_bill',
                y='tip',
                data=tips,
                hue='smoker',
                hue_order=['Yes',
                            'No'])

plt.show()
```

- Especificando los colores de hue

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
hue_colors = {'Yes': 'black',
              'No': 'red'}
sns.scatterplot(x='total_bill',
                y='tip',
                data=tips,
                hue='smoker',
                palette=hue_colors)

plt.show()
```

- Usando hue con count plots

```{python}
import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x='smoker',
              data=tips,
              hue='sex')

plt.show()
```


### Gráficos de tono y dispersión

En el video anterior aprendimos como `hue` nos permite hacer fácilmente subgrupos dentro de los gráficos de Seaborn. Vamos a probarlo explorando los datos de los alumnos de secundaria. Tenemos mucha información sobre cada alumno, como su edad, dónde vive, sus hábitos de estudio y sus actividades extraescolares.

Por ahora, nos fijaremos en la relación entgre el número de faltas que tienen en la escuela y su calificación final en el curso, segmentada por el lugar donde vive el alumno (zona rural frente a zona urbana).

```{python}
student_data = pd.read_csv('./data/student-alcohol-consumption.csv', index_col=0)
student_data.head()
```

#### Instrucciones

1. Crea un gráfico de dispersión con `absensces` en el eje x y la calificación final (`"G3"`) en el eje y utilizando el DataFrame `student_data`. Colorea los puntos del gráfico en función de `"location"` (urbano vs. rural)

```{python}
# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a scatter plot of absences vs. final grade
sns.scatterplot(x='absences', 
                y='G3',
                data=student_data,
                hue='location')

# Show plot
plt.show()
```

2. Haz que `rural` aparezca antes que `urban` en la leyenda del gráfico.

```{python}
# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Change the legend order in the scatter plot
sns.scatterplot(x='absences', 
                y='G3',
                data=student_data,
                hue='location',
                hue_order=['Rural', 'Urban'])
# Show plot
plt.show()
```

Los estudiantes con más ausencias tienden a tener calificaciones más bajas tanto en áreas rurales como urbanas.


### Gráficos de tono y recuento

Sigamos explorando nuestro conjunto de datos de alumnos de secundaria examinando una nueva variable. La columna `school` indica las iniciales de la escuela a la que asistió al alumno: "GP" o "MS".

En el último ejercicio, creamos un gráfico de dispersión en el que los puntos del gráfico se coloreaban en función de si el alumno vivía en zona urbana o rural. ¿Cuántos alumnos viven en zonas urbanas frente a zonas rurales, y varía esto en función de la escuela a la que asiste el alumno?
Hagamos un gráfico de recuento con subgrupos para averiguarlo.

#### Instrucciones

- Rellena el diccionario `palette_colors` para asignar el valor de ubicación `"Rural"` al color `"green"` y el valor de ubicación `"Urban"` al color `"blue"`.

- Crea un gráfico de recuento con `"school"` en el eje x utilizando el DataFrame `student_data`.

    - Añade subgrupos al gráfico, utilizando la variable `"location"`` y utliliza el diccionario `palette_colors` para que los subgrupos de ubicación sean verdes o azules.

```{python}
# Import Matplotlib and Seaborn
import matplotlib.pyplot as plt
import seaborn as sns

# Create a dictionary mapping subgroup values to colors
palette_colors = {'Rural': 'green',
                  'Urban': 'blue'}

# Create a count plot of school with location subgroups
sns.countplot(x='school',
              data=student_data,
              hue='location',
              palette=palette_colors)

# Display plot
plt.show()
```

Los estudiantes en GP tienden a venir de una ubicación urbana, pero los estudiantes en MS están más equitativamente divididos.
