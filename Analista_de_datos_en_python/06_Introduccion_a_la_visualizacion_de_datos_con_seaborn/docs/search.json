[
  {
    "objectID": "01_Introduccion_a_seaborn.html",
    "href": "01_Introduccion_a_seaborn.html",
    "title": "1 Introducción a Seaborn",
    "section": "",
    "text": "Introducción a Seaborn\nQué es Seaborn y cuándo debes utilizarlo? En este capítulo, ¡Lo descubrirás! Además, aprenderás a crear gráficos de dispersión y de recuento tanto con listas de datos como con DataFrames de pandas. También conocerás una de las grandes ventajas de utilizar Seaborn: la posibilidad de añadir fácilmente una tercera varible a tus gráficos utilizando el color para representar diferentes subgrupos.\nimport seaborn as sns  # Samuel Norman Seaborn (sns)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nheight = [62, 64, 69, 75, 66,\n          68, 65, 71, 76, 73]\nweight = [120, 136, 148, 175, 137,\n          165, 154, 172, 200, 187]\nsns.scatterplot(x=height, y=weight)\nplt.show()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ngender = ['Female', 'Female',\n          'Female', 'Female',\n          'Male', 'Male', 'Male',\n          'Male', 'Male', 'Male']\nsns.countplot(x=gender)",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1 Introducción a Seaborn</span>"
    ]
  },
  {
    "objectID": "01_Introduccion_a_seaborn.html#introducción-a-seaborn",
    "href": "01_Introduccion_a_seaborn.html#introducción-a-seaborn",
    "title": "1 Introducción a Seaborn",
    "section": "",
    "text": "Qué es Seaborn?\n\nPuthon es una librería de visualización de datos\nCrea facilmente los tipos más comunes de gráficos\n\nPor qué es útil Seaborn?\n\nExploración de datos\nComunicación de resultados\n\nVentajas de Seaborn\n\nFácil de usar\nTrabaja bien con estructuras de datos de pandas\nConstruído sobre matplotlib\n\nCómo iniciar?\n\n\n\nEjemplo 1: Scatter plot\n\n\n\nEjemplo 2: Crear un count plot\n\n\n\nHacer un gráfico de dispersión con listas\nEn este ejecicio, utilizaremos un conjunto de datos que contiene información sobre 227 países. Este conjunto de datos contiene mucha información interesante sobre cada país, como sus tasas de natalidad y mortalidad y su producto interno bruto (GDP). GDP es el valor de todos los bienes y servicios producidas en un año, expresado en dólares por persona.\nHemos creado tres listas de datos a partir de este conjunto de datos para que puedas empezar. gdp es una lista que contiene el valor de GDP por país, expresado en dólares por persona. phones es una lista con el número de teléfonos móviles por cada 1000 personas en este país. Por último percent_literate es una lista que contiene el porcentaje de la población de cada país que sabe leer y escribir.\n\nimport pandas as pd\n\nruta = './data/countries-of-the-world.csv'\ndf = pd.read_csv(ruta)\ndf.head()\n\n\n\n\n\n\n\n\nCountry\nRegion\nPopulation\nArea (sq. mi.)\nPop. Density (per sq. mi.)\nCoastline (coast/area ratio)\nNet migration\nInfant mortality (per 1000 births)\nGDP ($ per capita)\nLiteracy (%)\nPhones (per 1000)\nArable (%)\nCrops (%)\nOther (%)\nClimate\nBirthrate\nDeathrate\nAgriculture\nIndustry\nService\n\n\n\n\n0\nAfghanistan\nASIA (EX. NEAR EAST)\n31056997\n647500\n48,0\n0,00\n23,06\n163,07\n700.0\n36,0\n3,2\n12,13\n0,22\n87,65\n1\n46,6\n20,34\n0,38\n0,24\n0,38\n\n\n1\nAlbania\nEASTERN EUROPE\n3581655\n28748\n124,6\n1,26\n-4,93\n21,52\n4500.0\n86,5\n71,2\n21,09\n4,42\n74,49\n3\n15,11\n5,22\n0,232\n0,188\n0,579\n\n\n2\nAlgeria\nNORTHERN AFRICA\n32930091\n2381740\n13,8\n0,04\n-0,39\n31\n6000.0\n70,0\n78,1\n3,22\n0,25\n96,53\n1\n17,14\n4,61\n0,101\n0,6\n0,298\n\n\n3\nAmerican Samoa\nOCEANIA\n57794\n199\n290,4\n58,29\n-20,71\n9,27\n8000.0\n97,0\n259,5\n10\n15\n75\n2\n22,46\n3,27\nNaN\nNaN\nNaN\n\n\n4\nAndorra\nWESTERN EUROPE\n71201\n468\n152,1\n0,00\n6,6\n4,05\n19000.0\n100,0\n497,2\n2,22\n0\n97,78\n3\n8,71\n6,25\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n# Convertir a numerico los datos tipo object\ndf['Phones (per 1000)'] = df['Phones (per 1000)'].str.replace(',', '.').astype(float)\ndf['Literacy (%)'] = df['Literacy (%)'].str.replace(',', '.').astype(float)\n\n# Crear las listas\ngdp = df['GDP ($ per capita)'].tolist()\nphones = df['Phones (per 1000)'].tolist()\npercent_literate = df['Literacy (%)'].tolist()\n\n\nInstrucciones\n\nImporta Matplotlib y Seaborn utilizando la convención de nomenclatura estándar.\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nCrea un gráfico de dispersión de GDP (gdp) frente al número de teléfonos por cada 1000 personas (phones).\n\n\n# Create scatterplot with GDP on x-axis and number of phones on the y-axis\nsns.scatterplot(x=gdp, y=phones)\nplt.show()\n\n\n\n\n\n\n\n\n\nCombina el diagrama de dispersión para que muestre el porcentaje de la población que sabe leer y escribir (percent_literate) en el eje y.\n\n\nsns.scatterplot(x=gdp, y=percent_literate)\nplt.show()\n\n\n\n\n\n\n\n\nAunque este gráfico no muestra una relación lineal entre el PIB y el porcentaje de alfabetización, los países con un PIB más bajo parecen tener más probabilidades de tener un porcentaje menor de la población que puede leer y escribir.\n\n\n\nHacer un gráfico de recuento con una lista\nEn el ejercicio anterior, exploramos un conjunto de datos que contienen información sobre 227 países. Exploremos más a fondo estos dato: concretamente, ¿cuántos países hay en cada región del mundo?\nPara ello, tendremos que utilizar un gráfico de recuento. Los gráficos de recuento toman una lista categórica y devuelven barras que representan el número de entradas de la lista por categoría. Puedes crear una aquí utilizando una lista de regiones para cada país, que es uva variable llamada region.\n\n# Se convierte la columna Region en lista y se quitan los espacios\nregion = df['Region'].tolist()\nregion = [item.strip() for item in region]\n\n\nInstrucciones\n\nImporta Matplotlib y Seaborn utilizando las convenciones de nomenclatura estándar.\nUtiliza Seaborn para crear un gráfico de recuento con region en el eje y.\nVisualiza el gráfico\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create count plot with region on the y-axis\nsns.countplot(y=region)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nÁfrica Subsahariana contiene la mayoría de los países en esta lista.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1 Introducción a Seaborn</span>"
    ]
  },
  {
    "objectID": "01_Introduccion_a_seaborn.html#utilizar-pandas-con-seaborn",
    "href": "01_Introduccion_a_seaborn.html#utilizar-pandas-con-seaborn",
    "title": "1 Introducción a Seaborn",
    "section": "Utilizar pandas con Seaborn",
    "text": "Utilizar pandas con Seaborn\n\nQué es Pandas?\n\nLibrería de Python para análisis de datos.\nPuede leer conjunto de datos de múltiples tipos de archivos. Por ejemplo csv, txt.\nEl conjunto de datos toma la forma de objeto DataFrame.\n\nTrabajando con DataFrames\n\n\nimport pandas as pd\ndf = pd.read_csv('masculinity.csv')\ndf.head()\n\n\nUsando DataFrames con countplot()\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv('masculinity.csv')\nsns.countplot(x='how_masucline', data=df)\nplt.show()\n\n\nDatos “ordenados” frente a datos “desordenados”\nAquí tenemos un conjunto de datos que muestra de una encuesta a niños sobre sus animales favoritos. Pros, ¿Podemos utilizar este conjunto de datos tal cual con Seaborn? Vamos a utilizar pandas para importar el archivo csv con los datos recogidos en la encuestra y determinar si está ordenado, lo cual es esencial para que funcione bien con Seaborn.\nPara empezar, se ha asignado la tura del archivo csv a la variable csv_filepath.\n\nInstrucciones\n\n\n\n\nLee el archivo csv situado en csv_filepath en un DataFrame llamado df.\nImprime la cabecera de df para mostrar las cinco primeras filas.\n\n\ncsv_filepath = './data/1.2.1_example_csv.csv'\n\n\n# Import pandas\nimport pandas as pd\n\n# Create a DataFrame from csv file\ndf = pd.read_csv(csv_filepath)\n\n# Print the head of df\nprint(df.head())\n\n  Unnamed: 0               How old are you?\n0     Marion                             12\n1      Elroy                             16\n2        NaN  What is your favorite animal?\n3     Marion                            dog\n4      Elroy                            cat\n\n\n\nPregunta\n\nVisualiza las cinco primeras filas del DataFrame df. ¿Está ordenado? ¿Por qué si o por qué no?\nRespuestas posibles\n\nSi, porque no hay erratas ni faltan valores.\nSi, porque está vien organizado y es fácil de leer.\nNo, porque una misma columna contiene distintos tipos de formación.\n\n\n\n\nHacer un gráfico de recuento con un DataFrame\nEn este ejercicio examinaremos las respuestas a una encuesta enviada a los jóvenes. Nuestra pregunta principal aquí es: ¿cuántos jóvenes encuestados afirman tener miedo a las arañas? Se pidió a los participantes en la encuesta que estuvieran de acuerdo o en desacuerdo con la afirmación “Tengo miedo a las arañas”. Las respuestas varían de 1 a 5, donde 1 es “Totalmente en desacuerdo” y 5 es “Totalmente de acuerdo”.\nPara empezar, la ruta del archivo csv con los datos de la encuesta se ha asignado a la variable csv_filepath.\n\nInstrucciones\n\nImporta Matplotlib, pandas y Seaborn utilizando los nombres estándar.\nCrea un DataFrame llamado df a partir del archivo csv situado en csv_filepath.\nUtilizando la función countplot() con los argumentos x= y data= para crear un gráfico de recuento con los valores de la columna \"Spiders\" en el eje x.\nVisualiza el gráfico.\n\n\ncsv_filepath = './data/young-people-survey-responses.csv'\n\n\n# Import Matplotlib, pandas and Seaborn\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a DataFrame from csv file\ndf = pd.read_csv(csv_filepath)\n\n# Create a countplot with \"Spiders\" on the x-axis\nsns.countplot(x='Spiders', data=df)\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\nEste gráfico nos muestra que la gran mayoría de los jóvenes informaron no tener miedo a las arañas.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1 Introducción a Seaborn</span>"
    ]
  },
  {
    "objectID": "01_Introduccion_a_seaborn.html#añadir-una-tercera-variable-con-el-tono",
    "href": "01_Introduccion_a_seaborn.html#añadir-una-tercera-variable-con-el-tono",
    "title": "1 Introducción a Seaborn",
    "section": "Añadir una tercera variable con el tono",
    "text": "Añadir una tercera variable con el tono\nPara probarlos usaremos el siguiente Dataset:\n\nDataset Tips\n\n\nimport pandas as pd\nimport seaborn as sns\ntips = pd.read_csv('./data/tips.csv')\ntips.head()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n0\n16.99\n1.01\nFemale\nNo\nSun\nDinner\n2\n\n\n1\n10.34\n1.66\nMale\nNo\nSun\nDinner\n3\n\n\n2\n21.01\n3.50\nMale\nNo\nSun\nDinner\n3\n\n\n3\n23.68\n3.31\nMale\nNo\nSun\nDinner\n2\n\n\n4\n24.59\n3.61\nFemale\nNo\nSun\nDinner\n4\n\n\n\n\n\n\n\n\nUn Scatter plot básico\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.scatterplot(x='total_bill',\n                y='tip',\n                data=tips)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nUn Scatter plot con hue\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.scatterplot(x='total_bill',\n                y='tip',\n                data=tips,\n                hue='smoker')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nConfigurando el orden del hue\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.scatterplot(x='total_bill',\n                y='tip',\n                data=tips,\n                hue='smoker',\n                hue_order=['Yes',\n                            'No'])\n\nplt.show()\n\n\n\n\n\n\n\n\n\nEspecificando los colores de hue\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nhue_colors = {'Yes': 'black',\n              'No': 'red'}\nsns.scatterplot(x='total_bill',\n                y='tip',\n                data=tips,\n                hue='smoker',\n                palette=hue_colors)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nUsando hue con count plots\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.countplot(x='smoker',\n              data=tips,\n              hue='sex')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nGráficos de tono y dispersión\nEn el video anterior aprendimos como hue nos permite hacer fácilmente subgrupos dentro de los gráficos de Seaborn. Vamos a probarlo explorando los datos de los alumnos de secundaria. Tenemos mucha información sobre cada alumno, como su edad, dónde vive, sus hábitos de estudio y sus actividades extraescolares.\nPor ahora, nos fijaremos en la relación entgre el número de faltas que tienen en la escuela y su calificación final en el curso, segmentada por el lugar donde vive el alumno (zona rural frente a zona urbana).\n\nstudent_data = pd.read_csv('./data/student-alcohol-consumption.csv', index_col=0)\nstudent_data.head()\n\n\n\n\n\n\n\n\nschool\nsex\nage\nfamsize\nPstatus\nMedu\nFedu\ntraveltime\nfailures\nschoolsup\n...\ngoout\nDalc\nWalc\nhealth\nabsences\nG1\nG2\nG3\nlocation\nstudy_time\n\n\n\n\n0\nGP\nF\n18\nGT3\nA\n4\n4\n2\n0\nyes\n...\n4\n1\n1\n3\n6\n5\n6\n6\nUrban\n2 to 5 hours\n\n\n1\nGP\nF\n17\nGT3\nT\n1\n1\n1\n0\nno\n...\n3\n1\n1\n3\n4\n5\n5\n6\nUrban\n2 to 5 hours\n\n\n2\nGP\nF\n15\nLE3\nT\n1\n1\n1\n3\nyes\n...\n2\n2\n3\n3\n10\n7\n8\n10\nUrban\n2 to 5 hours\n\n\n3\nGP\nF\n15\nGT3\nT\n4\n2\n1\n0\nno\n...\n2\n1\n1\n5\n2\n15\n14\n15\nUrban\n5 to 10 hours\n\n\n4\nGP\nF\n16\nGT3\nT\n3\n3\n1\n0\nno\n...\n2\n1\n2\n5\n4\n6\n10\n10\nUrban\n2 to 5 hours\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nInstrucciones\n\nCrea un gráfico de dispersión con absensces en el eje x y la calificación final (\"G3\") en el eje y utilizando el DataFrame student_data. Colorea los puntos del gráfico en función de \"location\" (urbano vs. rural)\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a scatter plot of absences vs. final grade\nsns.scatterplot(x='absences', \n                y='G3',\n                data=student_data,\n                hue='location')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nHaz que rural aparezca antes que urban en la leyenda del gráfico.\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Change the legend order in the scatter plot\nsns.scatterplot(x='absences', \n                y='G3',\n                data=student_data,\n                hue='location',\n                hue_order=['Rural', 'Urban'])\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLos estudiantes con más ausencias tienden a tener calificaciones más bajas tanto en áreas rurales como urbanas.\n\n\n\nGráficos de tono y recuento\nSigamos explorando nuestro conjunto de datos de alumnos de secundaria examinando una nueva variable. La columna school indica las iniciales de la escuela a la que asistió al alumno: “GP” o “MS”.\nEn el último ejercicio, creamos un gráfico de dispersión en el que los puntos del gráfico se coloreaban en función de si el alumno vivía en zona urbana o rural. ¿Cuántos alumnos viven en zonas urbanas frente a zonas rurales, y varía esto en función de la escuela a la que asiste el alumno? Hagamos un gráfico de recuento con subgrupos para averiguarlo.\n\nInstrucciones\n\nRellena el diccionario palette_colors para asignar el valor de ubicación \"Rural\" al color \"green\" y el valor de ubicación \"Urban\" al color \"blue\".\nCrea un gráfico de recuento con \"school\" en el eje x utilizando el DataFrame student_data.\n\nAñade subgrupos al gráfico, utilizando la variable \"location\"`` y utliliza el diccionariopalette_colors` para que los subgrupos de ubicación sean verdes o azules.\n\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a dictionary mapping subgroup values to colors\npalette_colors = {'Rural': 'green',\n                  'Urban': 'blue'}\n\n# Create a count plot of school with location subgroups\nsns.countplot(x='school',\n              data=student_data,\n              hue='location',\n              palette=palette_colors)\n\n# Display plot\nplt.show()\n\n\n\n\n\n\n\n\nLos estudiantes en GP tienden a venir de una ubicación urbana, pero los estudiantes en MS están más equitativamente divididos.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1 Introducción a Seaborn</span>"
    ]
  },
  {
    "objectID": "02_Visualizar_dos_variables_cuantitativas.html",
    "href": "02_Visualizar_dos_variables_cuantitativas.html",
    "title": "2 Visualizar dos variables cuantitativas",
    "section": "",
    "text": "Introducción a las plots (tramas) y subplots (subtramas) relacionales\nEn este capíulo, crearás y personalizarás gráficos que visualizan la relación entre dos variables cuantitativas. Para ello, utilizarás gráficos se dispersión y de líneas para explorar cómo cambia el nivel de contaminación atmosférica en una ciudad a lo largo de un día y cómo se relacionan los caballos de potencia con la eficiencia del combustible en los coches. También verás otra gran ventaja de utilizar Seaborn: ¡la posibilidad de crear fácilmente subtramas en una sola figura!\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            col='smoker')\nplt.show()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            row='smoker')\nplt.show()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            col='smoker',\n            row='time')\nplt.show()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            col='day')\nplt.show()\nEl gráfico se ve pequeño si todos estan en la misma fila\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            col='day',\n            col_wrap=2)\nplt.show()\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter',\n            col='day',\n            col_wrap=2,\n            col_order=['Thur',\n                       'Fri',\n                       'Sat',\n                       'Sun'])\nplt.show()",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>2 Visualizar dos variables cuantitativas</span>"
    ]
  },
  {
    "objectID": "02_Visualizar_dos_variables_cuantitativas.html#introducción-a-las-plots-tramas-y-subplots-subtramas-relacionales",
    "href": "02_Visualizar_dos_variables_cuantitativas.html#introducción-a-las-plots-tramas-y-subplots-subtramas-relacionales",
    "title": "2 Visualizar dos variables cuantitativas",
    "section": "",
    "text": "Gráficos relacionales\n\nAltura vs Peso\nNúmero de ausencias de un alumno vs Nota final\nGDP vs Personas que saben leer y escribir\n\nIntruducción a relplot()\n\nCrea gráficos relacionales: scatterplots o line plots\n¿Por qué usar relplot() en lugar de scatterplot()?\n\nrelplot() permite crear subgráficos en una sola figura.\n\n\nScatterplot() vs relplot()\n\n# para poder mostrar el dataset en los ejemplos\nimport pandas as pd\ntips = pd.read_csv('./data/tips.csv')\n\n\nUsando scatterplot()\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.scatterplot(x='total_bill',\n                y='tip',\n                data=tips)\nplt.show()\n\n\n\n\n\n\n\n\n\nUsando relplot()\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill',\n            y='tip',\n            data=tips,\n            kind='scatter')\nplt.show()\n\n\n\n\n\n\n\n\nSubplots en columnas\n\n\n\nSubplots en filas\n\n\n\nSubplots en filas y columnas\n\n\n\nSubgrupos por día de la semana\n\n\n\n\nWrapping columns\n\nSe pueden establecer dos gráficos por fila\n\n\n\n\nOrden de las columnas\n\n\n\nCrear subtramas con columna y fila\nHemos visto en ejercicios anteriores que los alumnos con más faltas (\"absences\") tienden a tener notas finales más bajas (\"G3\"). ¿Se mantiene esta relación independientemente de cuánto tiempo estudien los alumnos cada semana?\nPara responder a esto, observaremos la relación entre el número de faltas de asistencia a clase de un alumno y su calificación final en el curso, creando subtramas separadas en función del tiempo de estudio semanal de cada alumnos (\"study_time\").\n\nimport pandas as pd\nstudent_data = pd.read_csv('./data/student-alcohol-consumption.csv', index_col=0)\nstudent_data.head()\n\n\n\n\n\n\n\n\nschool\nsex\nage\nfamsize\nPstatus\nMedu\nFedu\ntraveltime\nfailures\nschoolsup\n...\ngoout\nDalc\nWalc\nhealth\nabsences\nG1\nG2\nG3\nlocation\nstudy_time\n\n\n\n\n0\nGP\nF\n18\nGT3\nA\n4\n4\n2\n0\nyes\n...\n4\n1\n1\n3\n6\n5\n6\n6\nUrban\n2 to 5 hours\n\n\n1\nGP\nF\n17\nGT3\nT\n1\n1\n1\n0\nno\n...\n3\n1\n1\n3\n4\n5\n5\n6\nUrban\n2 to 5 hours\n\n\n2\nGP\nF\n15\nLE3\nT\n1\n1\n1\n3\nyes\n...\n2\n2\n3\n3\n10\n7\n8\n10\nUrban\n2 to 5 hours\n\n\n3\nGP\nF\n15\nGT3\nT\n4\n2\n1\n0\nno\n...\n2\n1\n1\n5\n2\n15\n14\n15\nUrban\n5 to 10 hours\n\n\n4\nGP\nF\n16\nGT3\nT\n3\n3\n1\n0\nno\n...\n2\n1\n2\n5\n4\n6\n10\n10\nUrban\n2 to 5 hours\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nInstrucciones\n\nModifica el código paora utilizar relplot() en lugar de scatterplot().\n\n\n# Change to use relplot() instead of scatterplot()\nsns.relplot(x='absences', y='G3',\n            data=student_data,\n            kind='scatter')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nModifica el código para crear un gráfico de dispersión para cada nivel de la variable \"study_time\", ordenado en columnas.\n\n\n# Change to make subplots based on study time\nsns.relplot(x='absences', y='G3',\n            data=student_data,\n            kind='scatter',\n            col='study_time')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nAdapta tu código para crear un gráfico de dispersión para cada nivel del tiempo de estudio semanal de un alumno, esta vez ordenado en filas.\n\n\n# Change this scatter plot to arrange the plots in rows instead of columns\nsns.relplot(x='absences', y='G3',\n            data=student_data,\n            kind='scatter',\n            row='study_time')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nDebido a que estos subgráficos tenían un gran rango de valores x, es más fácil leerlos dispuestos en filas en lugar de columnas.\n\n\n\nCrear subtramas de dos factores\nSigamos examinando el conjunto de datos student_data de alumnos de secundaria. Aquí queremos responder a la siguiente pregunta: ¿la nota del primer semestre de un alumno (\"G1\") tiende a correlacionarse con su nota final (\"G3\")?\nHay muchos aspectos de la vida de un alumno que pueden dar lugar a una nota final más alta o más baja en la clase. Por ejemplo, algunos alumnos reciben apoyo educativo adicional de su centro escolar (\"schoolsup\") o de su familia (\"famsup\"), lo que podría traducirse en mejores notas. Intentamos controlar estos dos factores creando subtramas en función de si el alumno recibió apoyo educativo adicional de su escuela o de su familia.\n\nInstrucciones\n\nUtiliza relplot() para crear un gráfico de dispersión con \"G1\" en el eje x y \"G3\" en el eje y, utilizando el DataFrame student_data\n\n\n# Create a scatter plot fo G1 vs. G3\nsns.relplot(x='G1', y='G3',\n            data=student_data,\n            kind='scatter',\n            )\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCrea subtramas de columnas en función de su el alumno recibió ayuda de la escuela (\"schoolsup\"), ordenadas de forma que “si” vaya antes que “no”.\n\n\n# Adjust to add subplots based on school support\nsns.relplot(x='G1', y='G3',\n            data=student_data,\n            kind='scatter',\n            col='schoolsup',\n            col_order=['yes', 'no']\n            )\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nAñade subgrupos de filas en función de su el alumno recibió ayuda de la familia (\"famsup\"), ordenados de forma que “si” vaya antes que “no”. Esto dará lugar a subtramas basadas en dos factores.\n\n\n# Adjust further to add subplots based on family support\nsns.relplot(x='G1', y='G3',\n            data=student_data,\n            kind='scatter',\n            col='schoolsup',\n            col_order=['yes', 'no'],\n            row='famsup',\n            row_order=['yes', 'no'])\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nParece que la nota del primer semestre si correlaciona con la nota final, independientemente dl tipo de apoyo que recibió el estudiante.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>2 Visualizar dos variables cuantitativas</span>"
    ]
  },
  {
    "objectID": "02_Visualizar_dos_variables_cuantitativas.html#personalizar-gráficos-de-dispersión",
    "href": "02_Visualizar_dos_variables_cuantitativas.html#personalizar-gráficos-de-dispersión",
    "title": "2 Visualizar dos variables cuantitativas",
    "section": "Personalizar gráficos de dispersión",
    "text": "Personalizar gráficos de dispersión\n\nResumen Scatter plot\n\nMuestran la realción entre dos variables cuantitativas.\nHemos visto:\n\nSubplots (col y row)\nSubgrupos con color (hue)\n\nNuevas personalizaciones:\n\nSubgrupos con tamaño de punto y estilo.\nCambio en la transparencia de los puntos.\n\nSe pueden utilizar en scatterplot() y relplot()\n\nSubgrupos con tamaño de punto\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill', y='tip',\n            data=tips,\n            kind='scatter',\n            size='size')\nplt.show()\n\n\n\n\n\n\n\n\nEl gráfico anterior es difícil de leer pues todos los puntos son del mismo color. Su visualización puede facilitarse utilizando lo siguiente:\n\nTamaño de punto y hue\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill', y='tip',\n            data=tips,\n            kind='scatter',\n            size='size',\n            hue='size')\nplt.show()\n\n\n\n\n\n\n\n\n\nSubbrupos con estilo de punto\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.relplot(x='total_bill', y='tip',\n            data=tips,\n            kind='scatter',\n            hue='smoker',\n            size='smoker')\nplt.show()\n\n\n\n\n\n\n\n\n\nCambiando la transparencia del punto\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Set alpha to be between 0 and 1\nsns.relplot(x='total_bill', y='tip',\n            data=tips,\n            kind='scatter',\n            alpha=0.4)\n\nplt.show()\n\n\n\n\n\n\n\n\nEste último gráfico es muy útil cuando hay gran concentración de puntos\n\nCambiar el tamaño de los puntos del diagrama del dispersión\nEn este ejercicio, exploraremos el conjunto de datos mpg de Seaborn, que contiene una fila por modelo de coche e incluye información como el año de fabricación del coche, el número de millas por galón (“M.P.G.”) que alcanza, la potencia de su motor (medida en “caballos”) y su país de origen.\n¿Cuál es la relación entre la potencia del motor de un coche (\"horsepower\") y su eficiencia de combustible (\"mpg\")? ¿Y cómo varía esta relación según el número de cilindros (\"cylinders\") que tenga el coche? Averigüémoslo.\nSigamos utilizando relplot() en lugar de scatterplot() ya que ofrece más flexibilidad.\n\nimport pandas as pd\nmpg = pd.read_csv('./data/mpg.csv')\nmpg.head()\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nmodel_year\norigin\nname\n\n\n\n\n0\n18.0\n8\n307.0\n130.0\n3504\n12.0\n70\nusa\nchevrolet chevelle malibu\n\n\n1\n15.0\n8\n350.0\n165.0\n3693\n11.5\n70\nusa\nbuick skylark 320\n\n\n2\n18.0\n8\n318.0\n150.0\n3436\n11.0\n70\nusa\nplymouth satellite\n\n\n3\n16.0\n8\n304.0\n150.0\n3433\n12.0\n70\nusa\namc rebel sst\n\n\n4\n17.0\n8\n302.0\n140.0\n3449\n10.5\n70\nusa\nford torino\n\n\n\n\n\n\n\n\nInstrucciones\n\nUtiliza relplot() y el DataFrame mpg para crear un gráfico de dispersión con \"horsepower\" en el eje x y \"mpg\" en el eje y. Varía el tamaño de los puntos según el número de cilindros del coche (\"cylinders\").\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create scatter plot of horsepower vs. mpg\nsns.relplot(x='horsepower', y='mpg',\n            data=mpg,\n            kind='scatter',\n            size='cylinders')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nPara que el gráfico se más fácil de leer, utiliza hue para variar el color de los puntos según el número de cilindros del coche (\"cylinders\").\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='horsepower', y='mpg',\n            data=mpg,\n            kind='scatter',\n            size='cylinders',\n            hue='cylinders')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLos coches con mayor potencia tienden a tener un menor número de millas por galón. También tienden a tener un mayor número de cilindros.\n\n\n\nCambiar el estilo de los puntos del gráfico de dispersión\nSigamos explorando el conjunto de datos mpg de Seaborn observando la relación entre la velocidad a la que se puede acelerar un coche (\"acceleration\") y su eficiencia de combustible (\"mpg\"). ¿Varían estas propiedades según el país de origen (\"origin\")?\nObserva que la variable \"acceleration\" es el tiempo de aceleración de 0 a 60 millas por hora, en segundos. Los valores más altos indican una aceleración más lenta.\n\nInstrucciones\n\nUtiliza relplot() y el DataFrame mpg para crear un gráfico de dispersión con \"acceleration\" en el eje x y \"mpg\" en el eje y. Varía el estilo y el color de los puntos de la trama según el país de origen (\"origin\").\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a scatter plot of acceleration vs. mpg\nsns.relplot(x='acceleration', y='mpg',\n            data=mpg,\n            kind='scatter',\n            style='origin',\n            hue='origin')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLos coches de EE.UU tienden a acelerar más rápido y obtener menos millas por galón en comparación con los coches de Europa y Japón.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>2 Visualizar dos variables cuantitativas</span>"
    ]
  },
  {
    "objectID": "02_Visualizar_dos_variables_cuantitativas.html#introducción-a-los-gráficos-lineales",
    "href": "02_Visualizar_dos_variables_cuantitativas.html#introducción-a-los-gráficos-lineales",
    "title": "2 Visualizar dos variables cuantitativas",
    "section": "Introducción a los gráficos lineales",
    "text": "Introducción a los gráficos lineales\n\nQué son los diagramas de lineas?\n\nHay dos tipos de gráficos relacionales: scatterpltos y lineplots\nScatterplots\n\nCada punto en el gráfico es una observación independiente.\n\nLineplots\n\nCada punto representa la misma cosa, típicamente seguida por el tiempo.\n\n\nEjemplo de Scatterplot\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2_mean',\n            data=air_df_mean,\n            kind='scatter')\nplt.show()\n\n\n\nEjemplot de lineplot\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2_mean',\n            data=air_df_mean,\n            kind='Line')\nplt.show()\n\n\n\nSubgrupos por localización\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2_mean',\n            data=air_df_mean,\n            kind='Line',\n            style='location',\n            hue='location')\nplt.show()\n\n\n\nAñadiendo marcadores\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2_mean',\n            data=air_df_mean,\n            kind='Line',\n            style='location',\n            hue='location',\n            markers=True)\nplt.show()\n\n\n\nApagando los estilos de líneas\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2_mean',\n            data=air_df_mean,\n            kind='Line',\n            style='location',\n            hue='location',\n            markers=True,\n            dashes=False)\nplt.show()\n\n\n\nMúltiples observaciones por valor de x\n\nScatter plot\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2',\n            data=air_df,\n            kind='scatter')\n\nplt.show()\n\n\n\nLine plot\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2',\n            data=air_df,\n            kind='Line')\n\nplt.show()\n\n\n- La región sombreada es el intervalo de confianza\n    - Asuma que el dataset es una muestra aleatoria\n    - Hay 95% de confianza que la media está dentro de este intervalo.\n    - Indicar la incertidumbre de nuestra estimación.\n\nReemplzando el intervalo de confianza con la desviación estándar.\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2',\n            data=air_df,\n            kind='line',\n            ci='sd')\nplt.show()\n\n\n\nDesactivando el intervalo de confianza\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.relplot(x='hour', y='NO_2',\n            data=air_df,\n            kind='line',\n            ci=None)\nplt.show()\n\n\n\nInterpretación de gráficos lineales\nEn este ejercicio, seguiremos explorando el conjunto de datos mpg de Seaborn, que contiene una fila por modelo de coche e incluye información como el año de fabricación del coche, su eficacia de combustible (medida en “millas por galón” o “M.P.G”) y su país de origen (USA, Europa o Japón).\n¿Cómo ha cambiado con el tiempo la media de millas por galón que alcanzan estos coches? ¡Utilicemos gráficos lineales para averiguarlo!\n\nInstrucciones\n\nUtiliza relplot() y el DataFrame mpg para crear un gráfico de líneas con \"model_year\" en el eje x y \"mpg\" en el eje y.\n\n\n# Import Matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a line plot\nsns.relplot(x='model_year', y='mpg',\n            data=mpg,\n            kind='line')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nPreguntas\n\n¿Cuál de las siguientes no es una interpretación correcta de este gráfico?\nRespuestas posibles\n\nEl promedio de millas por galón ha aumentado generalmente con el tiempo.\nLa distribución de millas por galón es menor en 1973 que en 1977.\nEl intervalo de confianza del 95 % para la media de millas por galón en 1970 es de aproximadamente 16 - 19,5 millas por galón.\nEste gráfico supone nuestros datos son una muestra aleatoria de todos los coches de US, Europa y Japón.\n\nLa región sombreada representa un intervalo de confianza para la media, no la distribución de las observaciones.\n\n\n\nVisualización de la desviación estándar con gráfico de líneas\nEn el último ejercicio, vimos cómo ha cambiado a lo largo del tiempo la media de millas por galón que alcanzan los coches. Ahora utilicemos un gráfico lineal para visualizar cómo ha cambiado la distribución de millas por galón a lo largo del tiempo.\n\nInstrucciones\n\nCambia el gráfico para que el área sombreada muestre la desviación estándar en lugar del intervalo de confianza para la media.\n\n\n# Make the shaded area show the standard deviation\nsns.relplot(x='model_year', y='mpg',\n            data=mpg,\n            kind='line',\n            errorbar='sd') # el parámetro ci fue deprecado\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nA diferencia del gráfico en el último ejercicio, este gráfico nos muestra la distribución de millas por galón para todos los coches en cada año.\n\n\n\nTrazar subgrupos en gráficos de líneas\nSigamos examinando el conjunto de datos mpg. Hemos visto que la media de millas por galón de los coches ha aumentado con el tiempo, pero, ¿cómo ha cambiado la media de caballos de los coches con el tiempo? ¿Y difiere esta tendencia según el país de origen?\n\nInstrucciones\n\nUtiliza relplot() y el DataFrame mpg para crear un gráfico de líneas con \"model_year\" en el eje x y \"horse_power\" en el eje y. Desactiva los intervalos de confianza en el gráfico.\n\n\n# Import matplotlib and Seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create line plot of model year vs. horsepower\nsns.relplot(x='model_year', y='horsepower',\n            data=mpg,\n            kind='line',\n            errorbar=None)\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCrea líneas diferentes para cada país (\"origin\") que varíen tanto en estilo de línea como en color.\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create line plot of model year vs. horsepower\nsns.relplot(x='model_year', y='horsepower',\n            data=mpg,\n            kind='line',\n            errorbar=None,\n            style='origin',\n            hue='origin')\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nAñade marcadores para cada punto de datos a las líneas.\n\n\nUtiliza el parámetro dashes para utilizar líneas continuas para todos los países, permitiendo al mismo tiempo diferentes estilos de marcador para cada línea.\n\n\nsns.relplot(x='model_year', y='horsepower',\n            data=mpg,\n            kind='line',\n            errorbar=None,\n            style='origin',\n            hue='origin',\n            markers=True,\n            dashes=False)\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nAhora hemos añadido subgrupos, podemos ver que esta tendencia a la baja en la potencia fue más pronunciada entre los coches de EE.UU.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>2 Visualizar dos variables cuantitativas</span>"
    ]
  },
  {
    "objectID": "03_Visualizar_variable_categorica_cuantitativa.html",
    "href": "03_Visualizar_variable_categorica_cuantitativa.html",
    "title": "3 Visualizar una variable categórica y una cuantitativa",
    "section": "",
    "text": "Gráficos de recuento y de barras.\nLas variables categóricas están presentes en casi todos los conjuntos de datos, pero destacan especialmente en los datos de encuestas. En este capítulo aprenderás a crear y personalizar gráficos categóricos, como gráficos de caja, gráficos de barras, gráficos de recuentro y gráficos de puntos. Por el camino, explorarás datos de encuestas a jóvenes sobre sus intereses, a estudiantes sobre sus hábitos de estudio y a hombres adultos sobre sus sentimientos acerca de la masculinidad.\nimport matplotlib.pyplot as plt\nimport seaborn as from django.conf import settings\nsns.countplot(x='how_masculine',\n              data=maculinity_data)\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='how_masculine',\n            data=masculinity_data,\n            kind='count')\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncategory_order=['No answer',\n                'Not at all',\n                'Not very',\n                'Somewhat',\n                'Very']\nsns.catplot(x='how_masculine',\n            data=masculinity_data,\n            kind='count',\n            order=category_order)\nplt.show()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='day', y='total_bill',\n            data=tips,\n            kind='bar')\nplt.show()\nimport matplotlib.plyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='day', y='total_bill',\n            data=tips,\n            kind='bar',\n            ci=None)\nplt.show()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='total_bill', y='day',\n            data=tips,\n            kind='bar')\nEs común poner la variable categórica en el eje x",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>3 Visualizar una variable categórica y una cuantitativa</span>"
    ]
  },
  {
    "objectID": "03_Visualizar_variable_categorica_cuantitativa.html#gráficos-de-recuento-y-de-barras.",
    "href": "03_Visualizar_variable_categorica_cuantitativa.html#gráficos-de-recuento-y-de-barras.",
    "title": "3 Visualizar una variable categórica y una cuantitativa",
    "section": "",
    "text": "Gráficos categóricos\n\nEjemplos: Gráficos de recuento y de barras\nIncluyen variables categóricas.\nComparaciones entre grupos\n\n\ncatplot()\n\nUsado para crear gráficos categóricos\nTiene las mismas ventajas de relplot()\nSe pueden crear facilmente subgráficos con col= y row=\n\ncountplot() vs. catplot()\n\n\n\n\nCambiando el orden\n\n\n\n\nGráfico de barras\n\nMuestran la media de una variable cuantitativa por categoría\n\n\n\n\n\nIntervalos de confianza\n\nLas líneas muestran los intervalos de confianza del 95% para la media.\nMuestran el nivel de incertidumbre sobre las estimaciones.\nAsumiendo que nuestros datos sean una muestra aleatoria.\n\nDesactivando los intervalos de confianza\n\n\n\n\nCambiando la orientación de las barras\n\n\n\n\n\nGráficos de recuento\nEn este ejercicio, volveremos a explorar nuestro conjunto de datos que contiene las respuestas a una encuesta enviada a los jóvenes. Podríamos sospechar que los jóvenes pasan mucho tiempo en internet, pero ¿Cuánto declaran utilizar internet al día? Utilicemos un gráfico de recunto para desglosar el número de respuestas de la encuesta en cada categoría y luego exploremos si cambia en función de la edad.\nComo recordatorio, para crear un gráfico de recuento, utilizaremos la función catplot() y especificaremos el nombre de la variable categórica a contar (x=____), el DataFrame de pandas a utilizar (data=____), y el tipo de gráfico (kind=\"count\").\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams['figure.figsize'] = (10, 5)\n\nruta = './data/young-people-survey-responses.csv'\nsurvey_data = pd.read_csv(ruta, index_col=0)\nsurvey_data.head()\n\n\n\n\n\n\n\n\nMusic\nTechno\nMovies\nHistory\nMathematics\nPets\nSpiders\nLoneliness\nParents' advice\nInternet usage\nFinances\nAge\nSiblings\nGender\nVillage - town\nAge Category\nInterested in Math\n\n\n\n\n0\n5.0\n1.0\n5.0\n1.0\n3.0\n4.0\n1.0\n3.0\n4.0\nfew hours a day\n3.0\n20.0\n1.0\nfemale\nvillage\nLess than 21\nFalse\n\n\n1\n4.0\n1.0\n5.0\n1.0\n5.0\n5.0\n1.0\n2.0\n2.0\nfew hours a day\n3.0\n19.0\n2.0\nfemale\ncity\nLess than 21\nTrue\n\n\n2\n5.0\n1.0\n5.0\n1.0\n5.0\n5.0\n1.0\n5.0\n3.0\nfew hours a day\n2.0\n20.0\n2.0\nfemale\ncity\nLess than 21\nTrue\n\n\n3\n5.0\n2.0\n5.0\n4.0\n4.0\n1.0\n5.0\n5.0\n2.0\nmost of the day\n2.0\n22.0\n1.0\nfemale\ncity\n21+\nTrue\n\n\n4\n5.0\n2.0\n5.0\n3.0\n2.0\n1.0\n1.0\n3.0\n3.0\nfew hours a day\n4.0\n20.0\n1.0\nfemale\nvillage\nLess than 21\nFalse\n\n\n\n\n\n\n\n\nInstrucciones\n\nUtiliza sns.catplot() para crear un gráfico de recuento utilizando el DataFrame survery_data con \"Internet usage\" en el eje x.\n\n\n# Create count plot of internet usage\nsns.catplot(x='Internet usage',\n            data=survey_data,\n            kind='count')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nHaz que las barras sean horizontales en lugar de verticales\n\n\n# Change the orientation of the plot\nsns.catplot(y='Internet usage',\n            data=survey_data,\n            kind='count')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nSepara este gráfico en dos subtramas de columnas contiguas en función de \"Age Category\", que separa a los encuestados en menores de 21 años y mayores de 21 años. A partir de 21 años.\n\n\n# Separate ubti cikynb subplots based on age category\nsns.catplot(y='Internet usage',\n            data=survey_data,\n            kind='count',\n            col='Age Category')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nParece que la mayoría de los jóvenes usan internet durante pocas horas todos los días, independientemente de su edad.\n\n\n\nDiagramas de barras con porcentajes\nSigamos explorando las respuestas a una encuesta enviada a los jóvenes. La variable \"Interested in Math\" es True si la persona declaró estar interesada o muy interesada en las matemáticas, y False en caso contrario. ¿Qué porcentaje de jóvenes afirma estar interesado en las matemáticas, y varía esto en función del género? Utilicemos un diagrama de barras para averiguarlo.\nComo recordatorio, crearemos un gráfico de barras utilizando la función catplot(), proporcionando el nombre de la varible categórica a poner en el eje x (x=____), el nombre de la variable cuantitativa a resumir en el eje y (y=____), el DataFrame de pandas a utilizar (data=____), y el tipo de gráfico categórico (kind=\"bar\").\n\nInstrucciones\n\nUtiliza el DataFrame survey_data y sns.catplot() para crear un gráfico de barras con \"Gender\" en el eje x y \"Interested in Math\" en el eje y.\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a bar plot of interest in math, separated by gender \nsns.catplot(x='Gender', y='Interested in Math',\n            data=survey_data,\n            kind='bar')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nCuando la variable y es Verdadero/Falso, los gráficos de barras mostrarán el porcentaje de respuestas que informan Verdadero. Este gráfico nos muestra que los hombres informan un interés mucho mayor en las matemáticas en comparación con las mujeres.\n\n\n\nPersonalizar gráficos de barras\nEn este ejercicio, exploraremos datos de alumnos de secundaria. La variable \"study_time\" registra el tiempo de estudio semanal declarado por cada estudiante como una de las siguientes categorías: \"&lt;2 hours\", \"2 to 5 hours\", \"5 to 10 hours\", o \"&gt;10 hours\". ¿Los alumnos que declaran estudiar más tienden a obtener mejores notas finales Comparemos la nota media final entre los alumnos de cada categoría mediante un diagrama de barras.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nruta = './data/student-alcohol-consumption.csv'\nstudent_data = pd.read_csv(ruta, index_col=0)\nstudent_data.head()\n\n\n\n\n\n\n\n\nschool\nsex\nage\nfamsize\nPstatus\nMedu\nFedu\ntraveltime\nfailures\nschoolsup\n...\ngoout\nDalc\nWalc\nhealth\nabsences\nG1\nG2\nG3\nlocation\nstudy_time\n\n\n\n\n0\nGP\nF\n18\nGT3\nA\n4\n4\n2\n0\nyes\n...\n4\n1\n1\n3\n6\n5\n6\n6\nUrban\n2 to 5 hours\n\n\n1\nGP\nF\n17\nGT3\nT\n1\n1\n1\n0\nno\n...\n3\n1\n1\n3\n4\n5\n5\n6\nUrban\n2 to 5 hours\n\n\n2\nGP\nF\n15\nLE3\nT\n1\n1\n1\n3\nyes\n...\n2\n2\n3\n3\n10\n7\n8\n10\nUrban\n2 to 5 hours\n\n\n3\nGP\nF\n15\nGT3\nT\n4\n2\n1\n0\nno\n...\n2\n1\n1\n5\n2\n15\n14\n15\nUrban\n5 to 10 hours\n\n\n4\nGP\nF\n16\nGT3\nT\n3\n3\n1\n0\nno\n...\n2\n1\n2\n5\n4\n6\n10\n10\nUrban\n2 to 5 hours\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nInstrucciones\n\nUtiliza sns.catplot() para crear un gráfico de barras con \"study_time\" en el eje x y la calificación final (\"G3\") en el eje y, utilizando el DataFrame student_data.\n\n\n# Create bar plot of average final grade in each study category\nsns.catplot(x='study_time', y='G3',\n            data=student_data,\n            kind='bar')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nUtilizando el parámetro order y la lista category_order que se proporciona, reorganiza las barras para que estén en orden de menor tiempo de estudio a mayor.\n\n\n# List of categories from lowest to highest\ncategory_order = ['&lt;2 hours',\n                  '2 to 5 hours',\n                  '5 to 10 hours',\n                  '&gt;10 hours']\n\n# Rearrange the categories\nsns.catplot(x='study_time', y='G3',\n            data=student_data,\n            kind='bar',\n            order=category_order)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nActualiza el gráfico para que ya no muestre los intervalos de confianza.\n\n\n# List of categories from lowest to highest\ncategory_order = ['&lt;2 hours',\n                  '2 to 5 hours',\n                  '5 to 10 hours',\n                  '&gt;10 hours']\n\n# Rearrange the categories\nsns.catplot(x='study_time', y='G3',\n            data=student_data,\n            kind='bar',\n            order=category_order,\n            errorbar=None) # ci=None deprecated\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLos estudiantes en nuestra muestra que estudiaron más tienen un promedio de calificaciones ligeramente más alto, pero no es una relación fuerte.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>3 Visualizar una variable categórica y una cuantitativa</span>"
    ]
  },
  {
    "objectID": "03_Visualizar_variable_categorica_cuantitativa.html#diagramas-de-caja",
    "href": "03_Visualizar_variable_categorica_cuantitativa.html#diagramas-de-caja",
    "title": "3 Visualizar una variable categórica y una cuantitativa",
    "section": "Diagramas de caja",
    "text": "Diagramas de caja\n\n¿Qué es un diagrama de caja?\n\nMuestra la distribución de datos cuantitativos.\nSe puede ver la mediana, la dispersión, la asimetría y los datos atípicos.\nFacilita la comparación entre grupos.\n\n\n\n\nCómo crear un diagrama de caja en Seaborn\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ng = sns.catplot(x='time', y='total_bill',\n                data=tips,\n                kind='box')\nplt.show()\n\n\n\nCambiar el orden de las categorías\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ng = sns.catplot(x='time', y='total_bill',\n                data=tips,\n                kind='box',\n                order=['Dinner',\n                        'Lunch'])\nplt.show()\n\n\n\nOmitir los valores atípicos usando sym\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ng = sns.catplot(x='time', y='total_bill',\n                data=tips,\n                kind='box',\n                sym='')\nplt.show()\n\n\n\nCambiando los bigotes usando whis\n\nPor defecto, los bigotes se extienden a 1.5 * el rango intercuartil.\nPuede ser extendido a 2.0 * IQR: whis=2.0\nMuestra los percentiles 5 y 95: whis=[5, 95]\nMuestra los valores mínimo y máximo: whis=[0, 100]\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ng = sns.catplot(x='time', y='total_bill',\n                data=tips,\n                kind='box',\n                whis=[0, 100])\nplt.show()\n\n\n\nCrea e interpreta un diagrama de cajas\nSigamos utilizando el conjunto de datos student_data. En un ejercicio anterior, exploramos la realción entre el estudio y la nota final utlizando un digrama de barras para comparar la nota final media (\"G3\") entre los estudiantes de diferentes categorías de \"study_time\".\nEn este ejercicio, intentaremos utilizar un diagrama de cajas para ver esta relación. Como recordatorio, para crear un gráfico de caja tendrás que utilizar la función catplot() y especificar el nombre de la variable categórica a poner en el eje x (x=____), el nombre de la variable cuantitativa a resumir en el eje y (y=____), el DataFrme de pandas a utilizar (data=____), y el timpo de gráfico (kind=\"box\").\n\nInstrucciones\n\nUtiliza sns.catplot(), y el DataFrame student_data para crear un gráfico de caja con \"study_time\" en el eje x y \"G3\" en el eje y. Establece el orden de las categorías en study_time_order.\n\n\n# Specify the category ordering\nstudy_time_order = ['&lt;2 hours', '2 to 5 hours',\n                    '5 to 10 hours', '&gt;10 hours']\n\n# Create a box plot and set the order of the categories\nsns.catplot(x='study_time', y='G3',\n            data=student_data,\n            kind='box',\n            order=study_time_order)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nPregunta ¿ Cuál de las siguientes es una interpretación correcta de este diagrama de caja?\n\nRespuestas Posibles\n\nEl percentil 75 de las notas es más alto entre los alumnos que estudian más de 10 horas a la semana.\nNo hay valores atípicos en estos gráficos de caja.\nEl percentil 5 de las notas entre los alumnos que estudian memnos de 2 horas es de 5,0.\nLa nota media entre los alumnos que estudian menos de 2 horas es de 10,0.\n\nLa línea del medio de cada caja representa la mediana.\n\n\n\nOmitir valores atípicos\nAhora vamos a utilizar el conjunto de datos student_data para ocmparar la distribución de las calificaciones finales (\"G3\") entre los estudiantes que tienen acceso a internet en casa y los que no. Para ello, utilizaremos la variable `“internet”, que es un indicador binario (si/no) de si un alumno tiene acceso a internet en casa.\nDado que internet puede ser menos accesible en las zonas rurales, añadiremos subgrupos en función de dónde viva el alumno. Pra ello, podemos utilizar la varible \"location\", que es un indicador de su un estudiante vive en una localidad urbana (“Urban”) o rural (“Rural”).\nComo recordatorio, puedes omitir los valores atípicos en los gráficos de caja estableciendo el parámetro sym iguan a una cadena vacía (\"\").\n\nInstrucciones\n\nUtiliza sns.catplot() para crear un gráfico de caja con el DataFrame student_data, poniendo internet en el eje x y \"G3\" en el eje y.\n\n\n# Create a box plot with subgroups and omit the outliers\nsns.catplot(x='internet', y='G3',\n            data=student_data,\n            kind='box',\n            col='location',\n            hue='location',\n            showfliers=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLas calificaciones medianas son bastante similares entre cada grupo, pero la dispersión de la distribución parece mayor entre los estudiantes que tienen acceso a internet.\n\n\n\nAjustar los bigotes\nEn la lección vimos que múltiples formas de definir los bigotes en un diagrama de caja. En esta serie de ejercicios, seguiermos utilizando el conjunto de datos student_data para comparar la distribución de las calificaciones finales (\"G3\") entre los estudiantes que mantienen un relación romántica y los que no. Utilizaremos la variable \"romantic\", que es un indicador si/no de si el alumno tiene una relación romántica.\nVamos a crear un diagrama de cajas para ver esta relación y probar distintas formas de definir los bigotes.\n\nInstrucciones\n\nAjusta el código para que los bigotes del diagrama de caja se extiendan hata 0,5 * IQR. Recuerda: el IQR es el rango intercuartílico.\n\n\n# Set the whiskers to 0.5 * IQR\nsns.catplot(x='romantic', y='G3',\n            data=student_data,\n            kind='box',\n            whis=0.5)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia el código para que los bigotes se extiendan hasta los percentiles 5 y 95\n\n\n# Extend the whiskers to the 5th and 95th percentile\nsns.catplot(x='romantic', y='G3',\n            data=student_data,\n            kind='box',\n            whis=[5, 95])\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia el código para que los bigotes se extiendan hsta los valores mínimo y máximo.\n\n\n# Set the wiskers at the min and max values\nsns.catplot(x='romantic', y='G3',\n            data=student_data,\n            kind='box',\n            whis=[0, 100])\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nLa nota media es la misma entre estos dos grupos, pero la nota máxima es más alta entre los estudiantes que no están en una relación romántica.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>3 Visualizar una variable categórica y una cuantitativa</span>"
    ]
  },
  {
    "objectID": "03_Visualizar_variable_categorica_cuantitativa.html#gráfico-de-puntos",
    "href": "03_Visualizar_variable_categorica_cuantitativa.html#gráfico-de-puntos",
    "title": "3 Visualizar una variable categórica y una cuantitativa",
    "section": "Gráfico de puntos",
    "text": "Gráfico de puntos\n\n¿Qué son los gráficos de puntos?\n\nLos puntos muestran la media de una variable cuantitativa.\nLas líneas verticales muestran los intervalos de confianza del 95%.\n\nGráficos de puntos vs Gráficos de líneas\n\nAmbos muestran:\n\nLa media de una variable cuantitativa.\nLos intervalos de confianza del 95% para la media\n\nDiferencias:\n\nLos gráficos de línea tienen variables cuantitativas (usualmente tiempo) en el eje x.\nLos gráficos de puntos son variables categóricas en el eje x.\n\n\nGráficos de puntos vs Gráficos de barras\n\nAmbos muestran:\n\nLa media de una variable cuantitativa.\nLos intervalos de confianza del 95% para la media\n\n\n\n\n\nCrear un Gráfico de puntos\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='age', y='masculinity_important',\n            data=masculinity_data,\n            kind='point',\n            hue='feel_masculine')\n            \nplt.show()\n\n\n\nDesconectando los puntos\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='age', y='masculinity_important',\n            data=masculinity_data,\n            kind='point',\n            hue='feel_masculine',\n            join=False)\n            \nplt.show()\n\n\n\nDesplegando la mediana\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom numpy import median\n\nsns.catplot(x='smoker', y='total_bill',\n            data=tips,\n            kind='point',\n            estimator=median)\n            \nplt.show()\n\n\n\nPersonalizar los intervalos de confianza\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='smoker', y='total_bill',\n            data=tips,\n            kind='point',\n            capsize=0.2)\n            \nplt.show()\n\n\n\nDesactivar los intervalos de confianza\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(x='smoker', y='total_bill',\n            data=tips,\n            kind='point',\n            ci=None)\n            \nplt.show()\n\n\n\nPersonalizar los gráficos de puntos\nSigamos examinando datos de alumnos de secundaria, esta vez utilizando un gráfico de puntos para responder a la pregunta: ¿Influye la calidad de la realción familiar del alumno en el número de faltas que tiene en la escuela? Aquí utilizaremos la variable \"famrel\", que describe la calidad de la relación familiar de un alumno de 1 (muy mala) a 5 (muy buena).\nComo recordatorio, para crear un gráfico de puntos, utiliza la función catplot() y especifica el nombre de la variable categórica a poner en el eje x (x=____), el nombre de la variable cuantitativa a resumir en el eje y (y=____), el DataFrame de pandas a utilizar (data=____), y el tipo de gráfico categórico (kind=\"point\").\n\nInstrucciones\n\nUtiliza sns.catplot() y el DataFrame student_data para crear un gráfico de puntos con \"famrel\" en el eje x y el número de ausencias (\"absences\") en el eje y.\n\n\n# Create a point plot of family relationship vs. absences\nsns.catplot(x='famrel', y='absences',\n            data=student_data,\n            kind='point')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nAñade “mayúsculas” al final de los intervalos de confianza con el tamaño 0.2.\n\n\n# Add caps to the cofidence interval\nsns.catplot(x='famrel', y='absences',\n            data=student_data,\n            kind='point',\n            capsize=0.2)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nElimina las líneas que unen los puntos de cada categoría.\n\n\n# Remove the lines joining the points\nsns.catplot(x='famrel', y='absences',\n            data=student_data,\n            kind='point',\n            capsize=0.2,\n            linestyle='none') # deprecated join=False\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nAunque el número promedio de ausencias es ligeramente menor entre los estudiantes con relaciones familiares de mayor calidad, los grandes intervalos de confianza nos dicen que no podemos estar seguros de que haya una asociación real aquí.\n\n\n\nGráficos de punto con subgrupos\nSigamos explorando el conjunto de datos de los alumnos de secundaria. Esta vez, formularemos la pregunta: ¿estar en una relación romántica está asociado a una mayor o menor asistencia a la escuela? ¿Y difiere esta asociación en función de la escuela a la que asisten los alumnos? Averigüémoslo mediante un gráfico de puntos.\n\nInstrucciones\n\nUtiliza sns.catplot() y el DataFrame student_data para crear un gráfico de puntos con el estado de la relación (\"romantic\") en el eje x y el número de ausencias (\"absences\") en el eje y. Colorea los puntos según la escuela a la que asistan (\"school\").\n\n\n# Create a point plot that uses color to create subgroups\nsns.catplot(x='romantic', y='absences',\n            data=student_data,\n            kind='point',\n            hue='school')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nDesactiva los intervalos de confianza del gráfico.\n\n\n# Turn off the confidence intervals for this plot\nsns.catplot(x='romantic', y='absences',\n            data=student_data,\n            kind='point',\n            hue='school',\n            errorbar=None) # deprecated ci=None)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nComo puede haber valores atípicos de alumnos con muchas ausencias, utiliza la función median que hemos importado de numpy para mostar la mediana de número de ausencias en lugar de la media.\n\n\n# Import median function from numpy\nfrom numpy import median\n\n# Plot the median number of absences instead of the mean\nsns.catplot(x='romantic', y='absences',\n            data=student_data,\n            kind='point',\n            hue='school',\n            errorbar=None,\n            estimator=median)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nParece que los estudiantes en relaciones románticas tienen un promedio y una mediana más altos de ausencias en la escuela GP, pero esta asociación no se mantiene en la escuela MS.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>3 Visualizar una variable categórica y una cuantitativa</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html",
    "href": "04_Personalizar_graficos_seaborn.html",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "",
    "text": "Cambiar el estilo y el color de la trama\nEn este último capítulo, aprenderás a añadir títulos informativos a los gráficos y etiquetas a los ejes, ¡que son una de las partes más importantes de cualquier visualización de datos! También aprenderás a personalizar el estilo de tus visualizaciones para orientar más rápidamente a tu audiencia hacia los puntos clave. Después, pondrás en común todo lo que has aprendido en los ejercicios finales del curso.\nsns.catplot(x='age', y='masculinity_important',\n            data=masculinity_data,\n            hue='feel_masculine',\n            kind='point')\nplt.show()\nsns.set_style('whitegrid')\n\nsns.catplot(x='age', y='masculinity_important',\n            data=masculinity_data,\n            hue='feel_masculine',\n            kind='point')\nplt.show()\nsns.set_palette('RdBu')\n\ncategory_order = [\"No answer\",\n                  \"Not al all\",\n                  \"Not very\",\n                  \"Somewhat\",\n                  \"Very\"]\n\nsns.catplot(x='how_masculine',\n            data=masculinity_data,\n            kind='count',\n            order=category_order)\nplt.show()\ncustom_palette = [\"red\", \"green\", \"orange\", \"blue\",\n                  \"yellow\", \"purple\"]\n\nsns.set_palette(custom_palette)\ncustom_palette = [\"#FBB4AE\", \"#B3CDE3\", \"#CCEBC5\",\n                  \"#DECBE4\", \"#FED9A6\", \"#FFFFCC\",\n                  \"#E5B8BD\", \"#FDDAEC\", \"#F2F2F2\"]\n\nsns.set_palette(custom_palette)\nsns.catplot(x='age',\n            y='masculinity_important',\n            data=masculinity_data,\n            hue='feel_masculine',\n            kind='point')\n\nplt.show()\nsns.set_context('talk')\n\nsns.catplot(x='age',\n            y='masculinity_important',\n            data=masculinity_data,\n            hue='feel_masculine',\n            kind='point')\n\nplt.show()",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html#cambiar-el-estilo-y-el-color-de-la-trama",
    "href": "04_Personalizar_graficos_seaborn.html#cambiar-el-estilo-y-el-color-de-la-trama",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "",
    "text": "Por qué personalizar?\n\nRazones para cambiar de estilo:\n\nPreferencias personales\nMejorar la legibilidad\nGuiar la interpretación\n\n\nCambiando los estilos de las figuras\n\nLos estilos de las figuras incluyen el fondo y los ejes\nOpciones: “white”, “dark”, “whitegrid”, “darkgrid”, “ticks”\nPara establecer uno de ellos como estilo global para todos los gráficos se utiliza sns.set_style()\n\nEstilo de figura por defecto (“white”)\n\nSi solo nos interesa la tendencia general:\n\n\n\n\n\nEstilo de figura: “whitegrid”\n\nPara determinar valores específicos:\n\n\n\n\n\nCambiando la paleta\n\nLos cambios en la paleta de la figura, cambia el color de los elementos principales del gráfico\nsns.set_palette()\nUse las paletas preestablecidas o personalizadas\n\nPaletas divergentes\n\n\n\nEjemplo (Paleta divergente)\n\n\n\n\nPaletas secuenciales\n\n\n\nEjemplo de paleta secuencial\n\n\n\nPaletas personalizadas\n\n\n\n\n\n\nCambiar la escala del gráfico\n\nEn las figuras “context” cambia la escala de los elementos y etiquetas del gráfico\n`sns.set_context()`\nDel mas pequeño al más grande: “paper”, “notebook”, “talk”, “poster”.\n\nContexto por defecto: “paper”\n\n\n\n\nContexto grande: “talk”\n\nPresentaciones donde el público este mas alejado del gráfico\n\n\n\n\n\nCambiar de estilo y de paleta\nVamos a nuestro conjunto de datos que contiene los resultados de una encuestra realizada a jóvenes sobre sus hábitos y preferencias. Hemos proportcionado el código para crear un gráfico de recuento de sus respuestas a la pregunta “¿Con qué frecuencia escuchas los consejos de tus padres?”. Ahora vamos a cambiar el estilo y la paleta para que esta trama sea más fácil de interpretar.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nruta = './data/young-people-survey-responses.csv'\nsurvey_data = pd.read_csv(ruta, index_col=0)\nsurvey_data.head()\n\n\n\n\n\n\n\n\nMusic\nTechno\nMovies\nHistory\nMathematics\nPets\nSpiders\nLoneliness\nParents' advice\nInternet usage\nFinances\nAge\nSiblings\nGender\nVillage - town\nAge Category\nInterested in Math\n\n\n\n\n0\n5.0\n1.0\n5.0\n1.0\n3.0\n4.0\n1.0\n3.0\n4.0\nfew hours a day\n3.0\n20.0\n1.0\nfemale\nvillage\nLess than 21\nFalse\n\n\n1\n4.0\n1.0\n5.0\n1.0\n5.0\n5.0\n1.0\n2.0\n2.0\nfew hours a day\n3.0\n19.0\n2.0\nfemale\ncity\nLess than 21\nTrue\n\n\n2\n5.0\n1.0\n5.0\n1.0\n5.0\n5.0\n1.0\n5.0\n3.0\nfew hours a day\n2.0\n20.0\n2.0\nfemale\ncity\nLess than 21\nTrue\n\n\n3\n5.0\n2.0\n5.0\n4.0\n4.0\n1.0\n5.0\n5.0\n2.0\nmost of the day\n2.0\n22.0\n1.0\nfemale\ncity\n21+\nTrue\n\n\n4\n5.0\n2.0\n5.0\n3.0\n2.0\n1.0\n1.0\n3.0\n3.0\nfew hours a day\n4.0\n20.0\n1.0\nfemale\nvillage\nLess than 21\nFalse\n\n\n\n\n\n\n\nTransformación de los datos de la columna \"Parents' advice\"\n\nsurvey_data[\"Parents' advice\"] = survey_data[\"Parents' advice\"].map({1: 'Never',\n                                                                     2: 'Rarely',\n                                                                     3: 'Sometimes',\n                                                                     4: 'Often',\n                                                                     5: 'Always'})\n\n\nInstrucciones\n\nConfigura el estilo en \"whitegrid\" para ayudar al público a determinar el número de respuestas de cada categoría.\n\n\n# Set the style to \"whitegrid\"\nsns.set_style('whitegrid')\n\n# Create a count plot or survey responses\ncategory_order = ['Never', 'Rarely', 'Sometimes',\n                  'Often', 'Always']\n\nsns.catplot(x=\"Parents' advice\",\n            data=survey_data,\n            kind='count',\n            order=category_order)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nEstablece la paleta de colores en la paleta secuencial denominada \"Purples.\n\n\n# Set the color palette to \"Purples\"\nsns.set_style('whitegrid')\nsns.set_palette('Purples')\n\n# Create a count plot or survey responses\ncategory_order = ['Never', 'Rarely', 'Sometimes',\n                  'Often', 'Always']\n\nsns.catplot(x=\"Parents' advice\",\n            data=survey_data,\n            kind='count',\n            order=category_order,\n            hue=\"Parents' advice\", legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia la paleta de colores a la paleta divergente \"RdBu\"\n\n\n# Change the color palette to \"RdBu\"\nsns.set_style('whitegrid')\nsns.set_palette('RdBu')\n\n# Create a count plot or survey responses\ncategory_order = ['Never', 'Rarely', 'Sometimes',\n                  'Often', 'Always']\n\nsns.catplot(x=\"Parents' advice\",\n            data=survey_data,\n            kind='count', \n            hue=\"Parents' advice\", legend=False,\n            order=category_order)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nEste estilo y la paleta de colores divergente resaltan mejor la diferencia entre el número de jóvenes que suelen escuchar los consejos de sus padres frente a los que no lo hacen.\n\n\n\nCambiar la escala\nEn este ejercicio, seguiremos examinando el conjunto de datos que contienen las respuestas de una encuesta a jóvenes. ¿Varía el porcentaje de personas que declaran sentirse solas en función del número de hermanos que tienen? Averigüémoslo utlizando un diagrama de barras, al tiempo que exploramos las cuatro escalas de diagrama diferentes de Seaborn. (“contextos”).\n\nInstrucciones\n\nEstablece la escala (“contexto”) en \"paper\", que es la más pequieña de las opciones de escala.\n\n\n# Set the context to \"paper\"\nsns.set_context('paper')\n\n# Create bar plot\nsns.catplot(x='Siblings', y='Loneliness',\n            data=survey_data, \n            kind='bar', \n            hue='Siblings', legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia el contexto a \"notebook\" para aumentar la escala.\n\n\n# Change the context to \"notebook\"\nsns.set_context(\"notebook\")\n\n# Create a bar plot\nsns.catplot(x='Siblings', y='Loneliness',\n            data=survey_data, \n            kind='bar', \n            hue='Siblings', legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia el contexto a \"talk\" para aumentar la escala.\n\n\n# Change the context to \"notebook\"\nsns.set_context(\"talk\")\n\n# Create a bar plot\nsns.catplot(x='Siblings', y='Loneliness',\n            data=survey_data, \n            kind='bar', \n            hue='Siblings', legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nCambia el contexto a \"poster\", que es la mayor escala disponbible.\n\n\n# Change the context to \"poster\"\nsns.set_context(\"poster\")\n\n# Create a bar plot\nsns.catplot(x='Siblings', y='Loneliness',\n            data=survey_data, \n            kind='bar', \n            hue='Siblings', legend=False)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nCada nombre de contexto da la sugerencia de Seaborn sobre cuándo usar una escala de gráfico dada (es un artículo, en un cuadrno de iPythonm en una charla/presentación o en una sesión de póster).\n\n\n\nUtilizar una paleta personalizada\nHasta ahora, hemos analizado varias cosas en el conjunto de datos de las respuestas a las encuestas de los jóvenes, como el uso que hacen de internet, la frecuencia con que escuchan a sus padres y cuántos de ellos dicen sentirse solos. Sin embargo, algo que no hemos hecho es un resumen básico del tipo de personas que responden a esta encuesta, incluyendo su edad y género. Proporcionar estos resúmenes básicos es siempre una buena práctica cuando se trata de un conjunto de datos desconocido.\nEl código proporcionado creará un diagrama de cajas que mostrará la distribución de edades de los encuestados masculinos frente a los femeninos. Vamos a ajustar el código para personalizar la apariencia , esta vez utilizando una paleta de colores personalizada.\n\nInstrucciones\n\nEstablece el estilo en \"darkgrid\".\nEstablece una paleta de colores personalizada con los códigos hexadecimales de color \"#39A7D0\" y \"#36ADA4\".\n\n\nsns.set_context('notebook')\n\n# Set the style to \"darkgrid\"\nsns.set_style('darkgrid')\n\n# Set a custom color palette\nsns.set_palette(['#39A7D0', '#36ADA4'])\n\n# Create the box plot of age distribution by gender\nsns.catplot(x='Gender', y='Age',\n            data=survey_data, kind='box',\n            hue='Gender', legend=False)  # se agregan pues palette sera deprecated\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nParece que la edad media es la misma para hombres y mujeres, pero la distribución de las mujeres se inclina hacia edades más jóvenes que la de los hombres.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html#añadir-títulos-y-etiquetas-parte-1",
    "href": "04_Personalizar_graficos_seaborn.html#añadir-títulos-y-etiquetas-parte-1",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "Añadir títulos y etiquetas: Parte 1",
    "text": "Añadir títulos y etiquetas: Parte 1\n\nCreando visualizaciones informativas\n\nSe añade un título.\nLas etiquetas de los ejes son informativas.\nLas etiquetas del eje x estan giradas para mayor claridad.\n\n\n\n\nObjetos FacetGrid vs. AxesSubplot\n\nLos gráficos de Seaborn creean dos diferentes tipos de objetos: FacetGrid y AxesSubplot.\n\n\n\ng = sns.scatterplot(x='height', y='weight', data=df)\ntype(g)\n\n\nmatplotlib.axes._subplots.AxesSubplot\n\n\nFacetGrid vacío\n\nEsta formado por uno o varios AxesSuubplots\n\n\nObjetos FacetGrid vs. AxesSubplot\n\n\n\n\n\n\n\n\nTipo de Objeto\nTipo de gráfico\nCaracterísticas\n\n\n\n\nFacetGrid\nrelplot(), catplot()\nPuede crear subplots\n\n\nAxesSubplot\nscatterplot, countplot, etc.\nCrea un solo gráfico\n\n\n\nAñadiendo un título al FacetGrid\n\n\ng = sns.catplot(x='Region', y='Birthrate',\n                data=gdp_data, kind='box')\n\ng.fig.suptitle('New Title',\n                y=1.03)\n\nplt.show()\n\n\n\nFacetGrids vs. AxesSubplots\nEn la lección reciente, aprendimos que las funciones de trazado de Seaborn crean dos tipos diferentes de objetos: objetos FacetGrid y objetos AxesSubplot. El método para añadir un título a tu gráfico variará en función del tipo de objeto que sea.\nEn el código proporcionadom hemos utilizado relplot() con el conjunto de datos de millas por galón para crear un gráfico de dispersión que muestra la realación entre el peso de un coche y su potencia. Este gráfico de dispersión se asigna a la variable g. Identifiquemos de qué tipo de objeto se trata.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nruta = './data/mpg.csv'\nmpg = pd.read_csv(ruta)\nmpg.head()\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nmodel_year\norigin\nname\n\n\n\n\n0\n18.0\n8\n307.0\n130.0\n3504\n12.0\n70\nusa\nchevrolet chevelle malibu\n\n\n1\n15.0\n8\n350.0\n165.0\n3693\n11.5\n70\nusa\nbuick skylark 320\n\n\n2\n18.0\n8\n318.0\n150.0\n3436\n11.0\n70\nusa\nplymouth satellite\n\n\n3\n16.0\n8\n304.0\n150.0\n3433\n12.0\n70\nusa\namc rebel sst\n\n\n4\n17.0\n8\n302.0\n140.0\n3449\n10.5\n70\nusa\nford torino\n\n\n\n\n\n\n\n\nInstrucciones\n\nIdentifica qué tipo de objeto es el gráfico g y asígnalo a la variable type_of_g\n\n\nsns.set_style('white')\n\n# Create a scatter plot\ng = sns.relplot(x='weight', y='horsepower',\n                    data=mpg, kind='scatter')\n\n# Identify plot type\ntype_of_g = type(g)\n\n# Print type\nprint(type_of_g)\n\n&lt;class 'seaborn.axisgrid.FacetGrid'&gt;\n\n\n\n\n\n\n\n\n\n\nPregunta\n\nAcabamos de ver que sns.relplot() crea objetos FacetGrid. ¿Qué otra función Seaborn crea un objeto FacetGrid en lugar de un objeto AxesSubplot?\nRespuestas posibles\n\nsns.catplot()\nsns.scatterplot()\nsns.boxplot()\nsns.countplot()\n\ncatplot() admite la creación de subgráficos, por lo que crea un objeto FacetGrid.\n\n\n\nAñadir un título a un objeto FacetGrid\nEn el ejercicio anterior, utilizamos relplot() con el conjunto de datos de millas por galón para crear un gráfico de dispersión que mostrara la relación entre el peso de un coche y su potencia. Esto creó el objeto FacetGrid. Ahora que sabemos qué tipo de objeto es, vamos a añadir un título a esta trama.\n\nInstrucciones\n\nAñade un título a esta trama: \"Car Wight vs. Horsepower\".\n\n\n# Create a scatter plot\ng = sns.relplot(x='weight', y='horsepower',\n            data=mpg, kind='scatter')\n\n# Add a title \"Car Weight vs. Horsepower\"\ng.fig.suptitle('Car Weight vs. Horsepower')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nParece que el peso de un coche está correlacionado positivamente con su potencia.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html#añadir-títulos-y-etiquetas-parte-2",
    "href": "04_Personalizar_graficos_seaborn.html#añadir-títulos-y-etiquetas-parte-2",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "Añadir títulos y etiquetas: Parte 2",
    "text": "Añadir títulos y etiquetas: Parte 2\n\nAñadiendo un título a AxesSubplot\n\nFacetGrid\n\n\ng = sns.catplot(x='Region', y='Birthrate',\n                data=gdp_data,\n                kind='box')\n\ng.fig.suptitle('New Title',\n               y=1.03)\n\n\nAxesSubplot\n\ng = sns.boxplot(x='Region', y='Birtrate',\n                data=gdp_data)\n\ng.set_title('New Title',\n            y=1.03)\n\n\nTítulos para subgráficos\n\n\ng = sns.catplot(x='Region', y='Birthrate',\n                data=gdp_data, kind='box',\n                col='Group')\n\n# Título general\ng.fig.suptitle('New Title',\n                y=1.03)\n\n# Título de cada gráfico\ng.set_title('This is {col_name}')\n\n\n\nAñadir etiquetas a los ejes\n\n\ng = sns.catplot(x='Region', y='Birthrate',\n                data=gdp_data, kind='box',\n                col='Group')\n\ng.set(xlabel='New X Label',\n      ylabel='New Y Label')\n\nplt.show()\n\n\n\nRotando las etiquetas del eje x\n\n\ng = sns.catplot(x='Region', y='Birthrate',\n                data=gdp_data, kind='box',\n                col='Group')\n\nplt.xticks(rotation=90)\nplt.show()\n\n\n\nAñadir un título y etiquetas de eje\nSigamos examinando el conjunto de datos de millas por galón. Esta vez crearemos un gráfico lineal para responder a la pregunta: ¿Cómo cambia a lo largo del tiempo la media de millas por galón que alcanzan los coches en cada uno de los tres lugares de origen? Para mejorar la legibilidad de este gráfico, añadiremos un título y etiquetas de eje más informativas.\nEn el código proporcionado, creamos el gráfico de líneas utilizando la función lineplot(). Ten encuenta que lineplot() no admite la creación de subtramas, por lo que devuelve un obejeto AxesSubplot en lugar d eun objeto FacetGrid.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nruta = './data/mpg_mean.csv'\nmpg_mean = pd.read_csv(ruta, index_col=0)\nmpg_mean.head()\n\n\n\n\n\n\n\n\nmodel_year\norigin\nmpg_mean\n\n\n\n\n0\n70\neurope\n25.200000\n\n\n1\n70\njapan\n25.500000\n\n\n2\n70\nusa\n15.272727\n\n\n3\n71\neurope\n28.750000\n\n\n4\n71\njapan\n29.500000\n\n\n\n\n\n\n\n\nInstrucciones\n\nAñade el siguiente título a la trama: \"Average MPG Over Time\".\n\n\n# Create a line plot\ng = sns.lineplot(x='model_year', y='mpg_mean',\n                 data=mpg_mean, hue='origin')\n\n# Add title \"Average MPG Over Time\"\ng.set_title('Average MPG Over Time')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\n\nEtiqueta el eje x como \"Car Model Year\" y el eje y como \"Average MPG\".\n\n\n# Create a line plot\ng = sns.lineplot(x='model_year', y='mpg_mean',\n                 data=mpg_mean, hue='origin')\n\n# Add title \"Average MPG Over Time\"\ng.set_title('Average MPG Over Time')\n\n# Add x-axis and y-axis labels\ng.set(xlabel='Car Model Year',\n      ylabel='Average MPG')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nEl promedio de millas por galón logrado está aumentando con el tiempo para los tres lugares de origen, pero EE.UU.j siempre es más bajo que Europa y Japón.\n\n\n\nRotar etiquetas x-tick\nEn este ejercicio, seguiremos ecaminando el conjunto de datos de millas por galón. En el código proporcionado, creamos un gráfico de puntos que muestra la aceleración media de los coches en cada uno de los tres lugares de origen. Observa que la variable \"acceleration\" es el tiempo de aceleración de 0 a 60 millas por hora, en segundos. Los valores más altos indican una aceleración más lenta.\nUtilicemos este gráfico para practicar la rotación de las etiquetas x-tick. Recuerda que la función para rotar las etiquetas x-tick es una función independiente de Matplotlib y no una función aplicada al propio objeto gráfico.\n\nInstrucciones\n\nGira 90 grados las etiquetas x-tick.\n\n\n# Create point plot\nsns.catplot(x='origin', y='acceleration',\n            data=mpg, kind='point',\n            linestyle='none', capsize=0.1)  # join=False deprecated\n\n# Rotate x-tick labels\nplt.xticks(rotation=90)\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nDado que los valores más altos indican una aceleración más lenta, parece que los coches de Japón y Europa tienen una aceleración significativamente más lenta en comparación con los de EE.UU.",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html#unirlo-todo",
    "href": "04_Personalizar_graficos_seaborn.html#unirlo-todo",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "Unirlo Todo",
    "text": "Unirlo Todo\n\nInicio Para importar Seaborn:\n\n\nimport seaborn as sns\n\nPara importar Matplotlib:\n\nimport matplotlib.pyplot as plt\n\nPara mostrar un gráfico:\n\nplt.show()\n\n\nGráficos Relacionales\n\nMuestran la relación entre dos variables cuantitativas.\nEjemplos: scatter plots, line plots\n\n\n\nsns.relplot(x='x_variable_name',\n            y='y_variable_name',\n            data=pandas_df,\n            kind='scatter')\n\n\nGráficos Categóricos\n\nDescriben la distribución de una variable cuantitativa dentro de categorías definida por una variable categórica\nEjemplos: bar plots, count plots, box plots, pint plots\n\n\n\nsns.catplot(x='x_variable_name',\n            y='y_variable_name',\n            data=pandas_df,\n            kind='bar')\n\n\nAñadiendo una tercer variable (hue)\n\nConfigurar hue creatra subgrupos que son desplegados como diferentes colores en un solo gráfico\n\n\nAñadiendo una tercer variable (row/col)\n\nConfigurar row y/o col en relplot() o catplot() creará subgrupos que son desplegados en subgráficos separados.\n\n\nPersonalización\n\nCambiar el fondo: sns.set_style()\nCambiar los colores de los elementos principales: sns.set_palette()\nCambiar la escala: sns.set_context()\nAñadir un título\n\n\n\n\n\n\n\n\nTipo de Objeto\nTipo de gráfico\nCómo añadir un título\n\n\n\n\nFacetGrid\nrelplot(), catplot()\ng.fig.suptitle()\n\n\nAxesSubplot\nscatterplot(), countplot(), etc.\ng.set_title()\n\n\n\n\nToques finales\n\nAñadir etiquetas al eje x y eje y\n\n\n\ng.set(xlabel='new x-axis label',\n      ylabel='new y-axis label')\n\nRotar etiquetas el eje x\n\nplt.xticks(rotation=90)\n\n\nDiagrama de cajas con subgrupos\nEn este ejercicio, examinaremos el conjunto de datos que contiene las respuestas de una encuesta realizada a jóvenes. Una de las preguntas que se hicieron a los jóvenes fue: “¿Te interesa tener mascotas?” Exploraremos si la distribución de edades de los que responden “si” tiende a ser mayor o menor que la de los que responden “no”, distinguiendo según el género.\n\nsurvey_data['Interested in Pets'] = survey_data['Pets'].apply(\n    lambda x: 'Yes' if x &gt;= 4.0 else 'No')\n\n\nInstrucciones\n\nConfigura la paleta de colores en \"Blues\".\nAñade subgrupos para colorear los gráficos de caja en función de \"Interested in Pets\".\nEstablece el título del objeto FacetGrid g en `“Age of Those Interested in Pets vs. Not”.\nRealiza la visualización del gráfico utlizando una función Matplotlib.\n\n\n# Set palette to \"Blues\"\nsns.set_palette('Blues')\n\n# Adjust to add subgroups based on \"Interested in Pets\"\ng = sns.catplot(x='Gender', y='Age',\n                data=survey_data,\n                kind='box', hue='Interested in Pets')\n\n# Set title to \"Age of Those Interested in Pets vs. Not\"\ng.fig.suptitle('Age of Those Interested in Pets vs. Not')\n\n# Show plot\nplt.show()\n\n\n\n\n\n\n\n\nDespués de controlar por género, parece que las distribuciones de edad de las personas están interesadsas en las mascotas son similares a las de las que no lo están\n\n\n\nDiagrama de barras con subgrupos y subtramas\nEn este ejercicio, volveremos a nuestro conjunto de datos de la encuesta a jóvenes e investigaremos si la proporción de personas a las que les gusta la música tecno (\"Likes Techno\") varía según su género. (\"Gender\") o su lugar de residencia (\"Village - town\"). ¡Este ejercicio nos dará la oportunidad de practicar las muchas cosas que hemos aprendido a lo largo de este curso!\nAntes hay que transformar la columna ‘Techno’ por ‘Likes Techno’\n\nsurvey_data['Likes Techno'] = survey_data['Techno'].apply(lambda x: True if x &gt;= 4.0 else False)\n\n\nInstrucciones\n\nEstablece el estilo de la figura en \"dark\".\nAjusta el código del diagrama de barras para añadir subtramas basadas en \"Gender\", dispuestas en columnas.\nAñade el título \"Percentage of Young People Who Like Techno\" a esta trama FacetGrid.\nEtiqueta el eje x \"Location of Residence\" y el eje y \"% Who Like Techno\"\n\n\nplt.style.use('seaborn-v0_8')\n\n# Set the figure style to \"dark\"\nsns.set_style('dark')\n\n# Adjust to add subplots per gender\ng = sns.catplot(x='Village - town', y='Likes Techno',\n                data=survey_data, kind='bar',\n                col='Gender')\n\n# Add title and axix labels\ng.fig.suptitle('Percentage of Young People Who Like Techno',\n                y=1.02)\ng.set(xlabel='Location of Residence',\n      ylabel='% Who Like Techno')\n\n# Show plot\nplt.show()",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "04_Personalizar_graficos_seaborn.html#bien-hecho-y-ahora-qué",
    "href": "04_Personalizar_graficos_seaborn.html#bien-hecho-y-ahora-qué",
    "title": "4 Personalizar los gráficos de Seaborn",
    "section": "¡Bien hecho! ¿Y ahora qué?",
    "text": "¡Bien hecho! ¿Y ahora qué?\n\nExplorar y comunicar los resultados\n\n\n\nSeguientes pasos:\n\nVisualizaciones avanzadas con Seaborn\nMatplotlib avanzado personalizado",
    "crumbs": [
      "Capítulos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>4 Personalizar los gráficos de Seaborn</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción a la Visualización de Datos con Python",
    "section": "",
    "text": "Bienvenida\n📊 Nivel: Principiante\n🕒 Duración estimada: 4 horas\n🎥 Incluye código, visualizaciones y ejercicios",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#descripción",
    "href": "index.html#descripción",
    "title": "Introducción a la Visualización de Datos con Python",
    "section": "Descripción",
    "text": "Descripción\nSeaborn es una potente biblioteca de Python que facilita la creación de visualizaciones de datos informativas y atractivas. Este curso de 4 horas proporciona una introducción a cómo puedes utilizar Seaborn para crear diversos gráficos, incluidos gráficos de dispersión, de recuento, de barras y de cajas, y cómo puedes personalizar tus visualizaciones.\nExplorarás esta biblioteca y crearás gráficos Seaborn basados en diversos conjuntos de datos del mundo real, como la exploración de cómo cambia la contaminación atmosférica en una ciudad a lo largo del día y el estudio de lo que les gusta hacer a los jóvenes en su tiempo libre. Estos datos te darán la oportunidad de conocer de primera mano las ventajas de Seaborn, incluyendo cómo puedes crear fácilmente subtramas en una sola figura y cómo calcular automáticamente los intervalos de confianza.\nAl final de este curso, serás capaz de utilizar Seaborn en diversas situaciones para explorar tus datos y comunicar eficazmente a otros los resultados de tus análisis de datos. Estas habilidades son muy solicitadas para analistas de datos, científicos de datos y cualquier otro trabajo que pueda implicar la creación de visualizaciones de datos. Si quieres continuar tu aprendizaje, este curso forma parte de varios programas, incluido el programa de visualización de datos, donde podrás añadir más bibliotecas y técnicas a tu conjunto de habilidades.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#módulos-del-curso",
    "href": "index.html#módulos-del-curso",
    "title": "Introducción a la Visualización de Datos con Python",
    "section": "Módulos del curso",
    "text": "Módulos del curso\n\nConocer un conjunto de datos\n\nLimpieza e imputación de datos\nRelaciones en los datos\nConvertir el análisis exploratorio en acción",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#datasets",
    "href": "index.html#datasets",
    "title": "Introducción a la Visualización de Datos con Python",
    "section": "Datasets",
    "text": "Datasets\nEste curso utiliza los siguientes archivos:\n\nunemployment.csv\ndata_science_salaries.csv\nbooks.csv\ndivorce.csv\nplanes.csv",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  }
]